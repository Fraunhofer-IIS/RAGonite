{
    "id": "confluence-004",
    "title": "xl Migration",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/22609929/xl+Migration",
    "content": "<p>Owned by Ross Philipson\nLast updated: Aug 02, 2016 by Martin Osterloh\n\n</p><ac:structured-macro ac:macro-id=\"18801b2d-f552-44ca-b6e4-177e3858ba05\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><p><ac:image ac:width=\"80\"><ri:attachment ri:filename=\"cc-by.png\"></ri:attachment></ac:image></p><p>Copyright 2015 by Assured Information Security, Inc. Created by Martin Osterloh &lt;osterlohm@<a href=\"http://ainfosec.com\">ainfosec.com</a>&gt;. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"http://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\">http://creativecommons.org/licenses/by/4.0/</a>.</p><p>Contributions by: Ross Philipson &lt;philipsonr@ainfosec.com&gt;</p></ac:rich-text-body></ac:structured-macro><h2>Initial Setup</h2><p>The following instructions assume a few things. For the build environment:</p><ul><li>You have a build tree of master (6.0) OpenXT.</li><li>The instruction are relative to the base of you build tree i.e. where you cloned openxt.git.</li><li>You have installed a version of OpenXT on a target system with Measured Launch disabled that will be compatible with stuffs built in your build tree (preferably an install from the ISO of your build).</li><li>You have ssh access to the target system and a serial console. The latter will be very useful when we disable the NDVM.</li><li>Clone our working repo someplace that makes sense: <a href=\"https://github.com/rossphilipson/travail\">https://github.com/rossphilipson/travail</a></li></ul><p>Get a VHD:</p><ul><li>Start with a Debian x64 VM. We are using Debian Wheezy x64 named <code>/storage/disks/debian-7.8-x64-clean.vhd</code> in the Debian xl conf.</li><li>You can make one by installing a VM on an OpenXT system (no disk encryption) or copy over an existing VHD.</li></ul><h2>Building</h2><p>For these steps the target system will need to be up with network access. SELinux should also be disabled to allow copying files to the <code>/storage</code> dir. Do this:</p><pre>$ nr</pre><pre>$ setenforce 0</pre><h3>libxl and blktap2</h3><p>First we will make sure that <code>libxl</code> and <code>blktap2</code> are compiled as part of the xen-tools package. In order to do so, we edit the file build/repos/xenclient-oe/recipes-extended/xen/<a href=\"http://xen-tools.bb/\">xen-tools.bb</a>. Get the patch file here: <a href=\"https://github.com/rossphilipson/travail/blob/master/openxt/xl/xen-tools-build-xl-blktap2.patch\">travail/blob/master/openxt/xl/xen-tools-build-xl-blktap2.patch</a>. Do this:</p><pre>$ cd build/repos/xenclient-oe</pre><pre>$ patch -p1 &lt; xen-tools-build-xl-blktap2.patch</pre><p>The <code>libxl</code> stuff needs to be patched before building the bits. Get the patch file here: <a href=\"https://github.com/rossphilipson/travail/blob/master/openxt/xl/xl-fix-misc-issues.patch\">travail/blob/master/openxt/xl/xl-fix-misc-issues.patch</a>. Do this:</p><pre>$ cd build/tmp-glibc/work/core2-32-oe-linux/xen-tools/4.3.4-r0/xen-4.3.4</pre><pre>$ patch -p1 &lt; xl-fix-misc-issues.patch</pre><p>Next we want to rebuild xen-tools and produce the new libs and bins for <code>libxl</code> and <code>blktap2</code>. Back in the <code>build</code> dir do this (note the capitol C):</p><pre>$ ./bb xen-tools -C compile</pre><p>Once the build completes, you should now have all the binaries you need. Tar them up:</p><pre>$ cd build/tmp-glibc/work/core2-32-oe-linux/xen-tools/4.3.4-r0</pre><pre>$ tar -czf image.tar.gz ./image</pre><p>Transfer the tarball to the <code>/storage</code> dir on the target machine.</p><h3>qemu-dm</h3><p>QEMU can be built to re-enable file logging (you don't have to do this but it is recommended). Get the patch file here: <a href=\"https://github.com/rossphilipson/travail/blob/master/openxt/xl/qemu-enable-file-logging.patch\">travail/blob/master/openxt/xl/qemu-enable-file-logging.patch</a>. Do this:</p><pre>$ cd build/tmp-glibc/work/core2-32-oe-linux/qemu-dm/1.4.0-r0/qemu-1.4.0</pre><pre>$ patch -p1 &lt; qemu-enable-file-logging</pre><p>Next we will rebuild qemu-do:</p><pre>$ ./bb qemu-dm -C compile</pre><pre>$ cd build/tmp-glibc/work/core2-32-oe-linux/qemu-dm/1.4.0-r0/qemu-1.4.0/i386-softmmu</pre><p>Transfer <code>qemu-system-i386</code> to <code>/storage</code> dir on the target machine.</p><h3>Extra Packages</h3><p>Finally in the build tree there are a bunch of extra packages that will be needed. These need to be copied to the target. Package location and list:</p><ac:structured-macro ac:macro-id=\"7e9d9a4a-f44f-4348-a029-e88590dadb59\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">bash</ac:parameter><ac:plain-text-body><![CDATA[build/tmp-glibc/deploy/ipk/core2-32/git_2.5.0-r0_core2-32.ipk\nbuild/tmp-glibc/deploy/ipk/xenclient_dom0/kernel-module-libphy_3.18.28-r2_xenclient_dom0.ipk\nbuild/tmp-glibc/deploy/ipk/xenclient_dom0/kernel-module-mii_3.18.28-r2_xenclient_dom0.ipk\nbuild/tmp-glibc/deploy/ipk/xenclient_dom0/kernel-module-usbnet_3.18.28-r2_xenclient_dom0.ipk\nbuild/tmp-glibc/deploy/ipk/xenclient_dom0/kernel-module-asix_3.18.28-r2_xenclient_dom0.ipk\nbuild/tmp-glibc/deploy/ipk/xenclient_dom0/kernel-module-xen-netback_3.18.28-r2_xenclient_dom0.ipk]]></ac:plain-text-body></ac:structured-macro><p>Copy these files to <code>/storage</code> on the target system.</p><h2>Configuration</h2><h3>Work Repo</h3><p>The first thing to do is to get the work repository on the target system. Log in and do this:</p><ac:structured-macro ac:macro-id=\"31750009-b25c-451f-a0ff-76c13b2ff162\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">bash</ac:parameter><ac:plain-text-body><![CDATA[$ nr\n$ setenforce 0\n$ rw\n$ cd /storage\n$ opkg install git_2.5.0-r0_core2-32.ipk\n$ ro\n$ git clone git://github.com/rossphilipson/travail.git\n$ cd travail/openxt/xl]]></ac:plain-text-body></ac:structured-macro><p>This will now be the assumed working directory for the rest of these instructions unless otherwise stated. The <code>xltool.sh</code> script lives in here. This will be used for a lot of the configuration that is to follow.</p><h3>Configure</h3><p>The first configuration step is to use run the initialization utility. To do this you must use a serial terminal because networking will be disabled and the NDVM shutdown after this step. Do this:</p><pre>$ ./xltool.sh -i</pre><p>This will do a number of things to prepare the target system. A quick look at the <code>xl_hack_init</code> function will give you a good idea what it is doing. When disabling XSM, the script will reboot they target so don't be alarmed.</p><h4>Dom0 USB NICs</h4><p>This step is optional but highly recommended. This will require a USB Ethernet adapter. Most of the ones we have used the driver packages we copied above. Please note that you must adjust the version number for the packages below. Assume, we use kernel 4.4.16, the versions below would all be bumped up to 4.4.16. First install the packages:</p><ac:structured-macro ac:macro-id=\"5f4dccbf-92fa-473d-a447-2b4f4c88170b\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">bash</ac:parameter><ac:plain-text-body><![CDATA[$ rw\n$ cd /storage\n$ opkg install kernel-module-libphy_4.4.15-r2_xenclient_dom0.ipk\n$ opkg install kernel-module-mii_4.4.15-r2_xenclient_dom0.ipk\n$ opkg install kernel-module-usbnet_4.4.15-r2_xenclient_dom0.ipk\n$ opkg install kernel-module-asix_4.4.15-r2_xenclient_dom0.ipk\n$ ro]]></ac:plain-text-body></ac:structured-macro><p>Next plug in your USB Ethernet device, move the wire to it and reboot. After the reboot, in the serial console do:</p><pre>$ udhcpc</pre><h4>Install Files</h4><p>The final step is to install the updated and new files for <code>xl</code>, <code>blktap2</code> and <code>qemu</code>. The script is used to do this. Run the following from the working dir:</p><pre>$ ./xltool.sh -s</pre><pre>$ ./xltool.sh -t /storage/travail/openxt/xl/image</pre><p>The second command is broken out to allow re-installation of key files at a later date. What the functions do is pretty obvious. And finally do a reboot before going on to the next section.</p><h2>Operation</h2><h3>Start a VM</h3><p>From the first section, these instructions assume a Debian Wheezy x64 named <code>/storage/disks/debian-7.8-x64-clean.vhd</code> is already present. The <code>debian.hvm xl</code> conf file is already setup to find this location. To start a VM go to the working directory and run the following:</p><pre>$ rw</pre><pre>$ xl -vvv create debian.hvm</pre><p>Note that the VM must be run with the file system set to read-write (only needs to be done once per boot). This will need to be fixed later but for now it gets things going.</p><h3>Focus and Input</h3><p>When an HVM is first started, there will be no graphics. The first thing to do is to set a slot then switch focus:</p><pre>$ xec -s com.citrix.xenclient.input set-slot &lt;domid&gt; &lt;slot&gt;</pre><pre>$ xec -s com.citrix.xenclient.input switch-focus &lt;domid&gt; true</pre><p>The next time the HVM is started it will still be set on that same slot so you do not need to do both of those and you will get graphics and relative mouse movements. Absolute mouse movements (basically actually moving the cursor) will not work until you update the slot again with the new domid: </p><pre>$ xec -s com.citrix.xenclient.input set-slot &lt;new-domid&gt; &lt;slot&gt;</pre><h3>Further Settings</h3><p>TODO xen-netback has to be installed and <strong>loaded</strong> in dom0 (this will need some serious work with stubdoms/ndvm)tap_ctl_attach</p><p>TODO optional serial out from guest and nc</p><h3>Notes and Troubleshooting</h3><p>TODO killall qemu-system-i386</p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
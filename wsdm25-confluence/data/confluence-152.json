{
    "id": "confluence-152",
    "title": "Building - Version 6 and Later",
    "url": "https://openxt.atlassian.net/wiki/spaces/OD/pages/21397507/Building+-+Version+6+and+Later",
    "content": "<p>Owned by Jed\nLast updated: Sep 11, 2019 by Jed\n\n</p><p class=\"auto-cursor-target\"><br/></p><ac:structured-macro ac:macro-id=\"e51264a6-6cf2-48c6-ab9c-c4e2c07469d9\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><p><ac:image ac:width=\"80\"><ri:attachment ri:filename=\"cc-by.png\" ri:version-at-save=\"1\"></ri:attachment></ac:image></p><p>Copyright 2016 by Assured Information Security, Inc. Created by Jean-Edouard Lejosne &lt;lejosnej@<a href=\"http://ainfosec.com/\">ainfosec.com</a>&gt;. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"http://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\">http://creativecommons.org/licenses/by/4.0/</a>.</p></ac:rich-text-body></ac:structured-macro><p><br/></p><p>OpenXT version 6 and later include build scripts that help you setup a build environment and build OpenXT.</p><p>The scripts use LXC Containers for the Linux bits (OpenEmbedded-based OpenXT core, Debian tools and Centos tools), and a KVM VM for the Windows tools.</p><p>It is recommended to use a recent 64 bits Debian version (Jessie / Stretch) as the host OS because:</p><ul><li>setup.sh depends on Apt</li><li>64 bits containers require a 64 bits host</li><li>LXC is still relatively young, and earlier versions don't work that well</li></ul><p>The setup step happens only once, as root, to install packages, create containers/VMs and more.</p><p>The build step should be run each time you need a new build.</p><p><br/></p><p><strong>Table of Contents:</strong></p><p><ac:structured-macro ac:macro-id=\"041fcf27-09fe-4278-abd0-31934f60e855\" ac:name=\"toc\" ac:schema-version=\"1\"></ac:structured-macro></p><h1>Setup</h1><p><strong>Install Git</strong></p><p><code>$ apt-get install git</code></p><p>If you are using Ubuntu 14.04 or above, you'll also need the package `lxc-templates`.</p><p><strong>Clone openxt.git</strong></p><p>The first build scripts exist in openxt.git (along with this <a class=\"external-link\" href=\"http://readme.md/\" rel=\"nofollow\">README.md</a> file), so clone that:</p><pre><code>$ git clone git://github.com/OpenXT/openxt.git\n</code></pre><p>You can of course clone your own fork. Be aware that there are another approximately 60 OpenXT repositories that will be checked out next.</p><p><strong>Configuring the environment</strong></p><p>Change to the <code>openxt/build-scripts</code> directory.</p><p>Run the following to see the list of options:</p><pre>$ ./setup.sh -h</pre><ac:structured-macro ac:macro-id=\"98d028f5-af2c-497b-882c-5fc5b2de4f7e\" ac:name=\"note\" ac:schema-version=\"1\"><ac:rich-text-body><p>setup.sh will install the Linux containers package (lxc) and use it to create containers that will become potentially quite big (a whole build can take almost 100GB of disk space (without the WIndows VM)).</p><p>By default, lxc creates all the containers in /var/lib/lxc. If the partition for that directory is too small, the build will fail.</p><p>To change the location of the containers to, for example, /home/lxc, do the following (as root):</p><pre>$ apt-get install lxc</pre><pre>$ echo \"lxc.lxcpath = /home/lxc\" &gt; /etc/lxc/lxc.conf</pre><p>Also, make sure that the lxc.lxcpath exists.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br/></p><ac:structured-macro ac:macro-id=\"a9ab56e9-f327-40c5-804f-12a52298564a\" ac:name=\"note\" ac:schema-version=\"1\"><ac:rich-text-body><p>If using Debian Buster (10), make sure your kernel is booted with the option \"<code>vsyscall=emulate</code>\".</p><p>For more information, see: <a href=\"https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=875981\">https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=875981</a></p></ac:rich-text-body></ac:structured-macro><p><br/></p><p>Run the following as <code>root</code> or with <code>sudo</code>:</p><pre><code>$ ./setup.sh [-u user] [...]</code></pre><ac:structured-macro ac:macro-id=\"dbd1ec9c-f2eb-43be-af48-61d46ba67f87\" ac:name=\"note\" ac:schema-version=\"1\"><ac:rich-text-body><p>If you want your setup to include a Windows VM, use the -w options, as documented <ac:link ac:anchor=\"winsetup\"><ri:content-entity ri:content-id=\"75497833\" ri:version-at-save=\"1\"></ri:content-entity><ac:plain-text-link-body><![CDATA[below]]></ac:plain-text-link-body></ac:link>.</p><p>As <code>setup.sh</code> is re-entrant, you can always run it again later with the -w option if you don't want to bother with it for now.</p></ac:rich-text-body></ac:structured-macro><p>The optional user parameter specifies the host user the build will run as, that may or may not already exist. If one is not supplied a user named <code>openxt</code> will be created. If the openxt user is created, you will be prompted to set a password.</p><p>The script is re-entrant, but in the ideal case it will have to be called only once for the life of the build machine.</p><p>This will setup all the containers and configure the build environment.</p><p>The end result consists of:</p><ul><li>3 new root containers named after the user and the type of container (example: <code>openxt-oe</code>)</li><li>A new directory in <code>/home/git</code> named after the build user (example: <code>/home/git/openxt/</code>)</li><li>4 build scripts copied to the home directory of the build user (example: <code>/home/openxt/build.sh</code>, <code>/home/openxt/oe/build.sh</code>, <code>/home/openxt/debian/build.sh</code> and <code>/home/openxt/centos/build.sh</code>)</li><li>The ssh key to ssh to the containers (example: <code>/home/openxt/ssh-key/openxt</code>)</li></ul><h2>Setting up the Windows VM<ac:structured-macro ac:macro-id=\"1e6c29e3-c680-433c-a198-94f304d101d4\" ac:name=\"anchor\" ac:schema-version=\"1\"><ac:parameter ac:name=\"\">winsetup</ac:parameter></ac:structured-macro></h2><p>The build scripts can also be used to setup a Windows VM (using KVM), and automatically build the tools in it as part of the main build process.</p><p>To add a Windows VM to the 3 containers, provide the script with the URL of a Windows 7/10 iso using the <code>-w</code> option.</p><p>For example:</p><pre>$ ./setup.sh -w <a href=\"http://inyourdreams.microsoft.com/win10x86.iso\" style=\"text-decoration: underline;\">http://inyourdreams.microsoft.com/win10x86.iso</a></pre><p>The Windows setup process requires quite a lot of user interaction, since the scripts can't control anything that happens in Windows, at least until the Build Daemon is installed.</p><p>To setup a Windows virtual machine as part of the setup step of the build scripts, just use the -w option, followed by the URL of a Windows ISO.</p><p>setup.sh will setup Windows last. Once the script reaches that point, it tell you to VNC to it to set it up.</p><p>Here's what to do:</p><pre>Under Linux;<br/>$ sudo apt-get install vncviewer</pre><pre>$ vncviewer &lt;Windows VM&gt;:&lt;port&gt;     # The script should tell you what the port is<br/><br/>Under Windows;<br/>- You can use any VNC viewer, such as the one included as a Google Chrome app. Search for \"VNC Viewer for Google Chrome\" under Apps.<br/><br/>Once VNC is connected;</pre><ul><li>Once you're in the VM, start a custom Windows install.</li><li>It will fail to find a disk driver, so click \"Load driver\", and navigate to <code>viostor</code> in the second CDROM, then the subfolder that corresponds to your version of Windows.</li><li>Finish the installation. The VM won't automatically come back after the first reboot, so type \"continue\" and setup.sh will restart it.</li><li>While Windows is completing the install, Windows 10 will get stuck while configuring the network. On the \"Let's connect you to a network\" screen, click the \"Skip for now\" button in the lower left corner to continue.</li><li>Optional: once the installation is done, you can finally fix the erratic mouse by going to the control panel and disable \"Enhanced Pointer Precision\" under Mouse Properties, Pointer Options.</li><li>Go to the Device Manager and update the driver of the ethernet card using \"NetKVM\" from the second CDROM.</li><li>Open powershell as Administrator (right click menu item, select \"Run as Administrator\") and type:<ul><li style=\"margin-left: 0.0px;\">\"Set-ExecutionPolicy -Scope LocalMachine -ExecutionPolicy Bypass\", then Y [enter].</li><li style=\"margin-left: 0.0px;\">\"Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Bypass\", then Y [enter].</li><li style=\"margin-left: 0.0px;\">\"Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass\", then Y [enter].</li></ul></li><li>In the start menu, type UAC [enter], and disable user access control.</li><li>Update Windows<ul><li style=\"margin-left: 0.0px;\">Beware of the side effects of installing Windows updates. For example, the network connection may be taken down until a reboot is done after performing some updates.</li></ul></li><li>Download and install git for Windows (e.g., <a href=\"https://git-scm.com)\">https://git-scm.com)</a>, open an Administrator cmd window and:<ul><li><code>cd \\</code></li><li><code>git clone <a href=\"https://github.com/OpenXT/openxt.git\">https://github.com/OpenXT/openxt.git</a></code></li><li><code>cd openxt\\windows</code></li><li><code>powershell .\\mkbuildserver.ps1</code><ul><li>Optional: add \"<code> -mirror http://&lt;your_mirror&gt;</code>\" if you wish to use a mirror to download the various installers</li><li>Optional: add \"<code> -proxy &lt;your_proxy&gt;</code>\" if you want the downloads to go through a proxy (only supported by Cygwin as of yet)</li></ul></li><li>Ignore messages about missing packages. These are packages that the script will install.</li><li>Near the end of the first run, for a long time the message \"Click the OK button to execute these tasks and update the configuration of this computer.\" will be displayed. The script it still running. Wait until the script finishes before proceeding.</li><li>The script will install packages and stuff, and prompt you to reboot a couple of times. Re-run the script as Administrator after each reboot.</li><li>.Net 3.5 will be installed as a dependency. This will require some user interaction.</li><li>Towards the end:<ul><li>There is a dialog titled \"Create Private Key Password\". Press \"None\". There will then be a prompt in the command window to \"Enter PFX password\", just hit Enter.</li><li>When prompted with the \"Security Warning\" about installing the certificate, select \"Yes\". <strong>NOTE:</strong> the default is \"No\" so be careful not to hit Enter.</li></ul></li></ul></li><li>After the last reboot, the BuildDaemon should start. <strong>IMPORTANT:</strong> allow winbuildd through the firewall when asked. The BuildDaemon is what will be used for further Windows interaction.</li><li>You can now close VNC and type \"continue\" in setup.sh</li></ul><h1>Build</h1><p><strong>Running the build</strong></p><p>Run the build script as the build user from above:</p><ul><li>Login as the user and go to the root of its home folder (example: <code><span>su - openxt</span></code>)</li><li>Run the following (running build.sh in a screen session is usually a good idea, it's safer and remotely accessible):</li></ul><pre><code>$ ./build.sh</code></pre><p>or (better):</p><pre>$ screen ./build.sh</pre><p>When the script is finished the build is done. The build output can be found in a directory named after the date (example: <code>/home/openxt/160301-1/</code>).</p><p>If a Windows VM was created as part of the setup, <code>build.sh</code> will use it to build the Windows guest tools.</p><p>Note: if the build fails, just run <code>build.sh</code> again, using the <code>-n</code> option to specify the build number. For example: <code>./build.sh -n 160301-1</code></p><p>Note: <code>build.sh</code> uses the external <code>fetch.sh</code> script to update the git mirrors and start the git service if needed.</p><ac:structured-macro ac:macro-id=\"f51b82ee-68ab-4805-a1b2-a50052d4deb9\" ac:name=\"note\" ac:schema-version=\"1\"><ac:rich-text-body><p>The build inside the containers will be done against your local git mirror. Running <code>git pull</code> inside the containers will pull from the mirror, not from the OpenXT GitHub repositories.</p><p><strong>You should run <code>fetch.sh</code> manually after each reboot (to start the git service),  and whenever you need the mirror updated.</strong></p></ac:rich-text-body></ac:structured-macro><h1>Install</h1><p>Just use the build output to install OpenXT the usual way, whether using the ISO or the netboot files.</p><p>In addition to that, there will be a Debian repository and an RPM repository that can be put on a web server and used to install the tools.</p><p>For example:</p><ul><li>On the host:<ul><li><code>sudo apt-get install apache2</code></li><li><code>sudo cp -r debian /var/www/html</code></li></ul></li><li>In a Jessie Debian VM on the guest:<ul><li><code>echo \"deb <a href=\"http://host/debian\">http://host/debian</a> jessie main\" &gt;&gt; /etc/apt/sources.list</code></li><li><code>apt-get update</code></li><li><code>apt-get install openxt-audio openxt-v4v openxt-vusb openxt-xenmou</code></li><li><code>reboot</code></li></ul></li></ul><h1>More information</h1><h2>Setup Step Details</h2><p>The scripts have been mostly tested on a fresh install of Debian Jessie 64 bits, but other (Debian-based) configurations should work too.</p><p>In more details, the script will:</p><ul><li>Create the user if it doesn't exist</li><li>Configure the user if needed by generating an ssh key pair and add him to the sudoer list</li><li>Install packages needed to create LXC containers, a git service and more</li><li>Create a separate LXC network for that user: <code>192.168.$(( 150 + UID % 100 )).0/24</code></li></ul><p>Once that's done, the main setup script will then create LXC containers for the user, and use container-specific <code>setup.sh</code> scripts to configure them.</p><p>3 containers will be created:</p><ul><li>$USER-oe: To build the core of OpenXT, based on OpenEmbedded</li><li>$USER-debian: To build the Debian tools</li><li>$USER-centos: To build the RPM tools</li></ul><p><strong>Note:</strong> In the main setup.sh, each container creation is a one-line function call that can be commented out if the user doesn't want that particular container.</p><p>A separate git mirror will also be created for the user. build.sh will fetch it each time it's called.</p><p><strong>Note:</strong> once the user has a build environment setup, it's important that he fetches the git mirrors before trying to pull anything in the build tree, to get the most recent version of the repository.</p><p>setup.sh will finally copy build.sh to the user's home directory.</p><h2>Build Step Details</h2><p>A successfully setup user can run <code>./build.sh</code> to start a build. That script will:</p><ul><li>Fetch the git mirrors</li><li>Start a git service if needed.</li><li>Start the containers if they're not already running, which requires root privileges and therefore will ask for the user's password to sudo.</li><li>Use container-specific build.sh scripts to build each container</li></ul><p>After about 5 to 8 hours, if everything went well, there will be an OpenXT build in a directory named after the current date.</p><p><strong>Note:</strong> In the main build.sh, each container build is a one-line function call that can be commented out if the user doesn't want to build that particular container.</p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "OD"
}
{
    "id": "confluence-104",
    "title": "QMP Notes",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/38338601/QMP+Notes",
    "content": "<p>Owned by Ross Philipson\nLast updated: May 19, 2016 by Ross Philipson\n\n</p><ac:structured-macro ac:macro-id=\"9a231856-1a29-4ed0-adc8-bb13d699c701\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><p><ac:image ac:width=\"80\"><ri:attachment ri:filename=\"cc-by.png\"></ri:attachment></ac:image></p><p>Copyright 2016 by Assured Information Security, Inc. Created by Ross Philipson &lt;philipsonr@<a href=\"http://ainfosec.com/\">ainfosec.com</a>&gt;. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"http://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\">http://creativecommons.org/licenses/by/4.0/</a>.</p></ac:rich-text-body></ac:structured-macro><h2>QMP</h2><p>The basics on QMP can be found here:</p><p><a href=\"http://wiki.qemu.org/QMP\">http://wiki.qemu.org/QMP</a></p><h2>QMP Helper</h2><p>When QEMU is run in dom0 with the toolstack (xl in this case), it will typically be setup to create a UNIX socket that xl can connect to and communicate with QEMU. This is done using a QEMU command line argument like this (where N is the quest's domain ID):</p><pre>-qmp unix:/var/run/xen/qmp-libxl-N,server,nowait</pre><p>The argument after <code>unix:</code> is the name of the UNIX socket that is created and set to listen for connections.</p><p>When QEMU is moved to a stub-domain, this communication method is no longer available. The QMP helper is the means by which QMP communications can be established with a QEMU running in a stub-domain. The QMP helper bits work a lot like the other stub-domain helpers in <code>xctools.git</code>. It consists of two components:</p><ol><li>A chardrv implementation that is introduced into the <code>qemu-char.c</code> code. This new type of chardrv can sit below other monitors and consoles and route traffic over V4V.</li><li>A proxy process called <code>qmp_helper</code> runs in <code>dom0</code> and can talk to the V4V chardrv in QEMU in the stubdom. The <code>qmp_helper</code> also creates a UNIX socket exactly as QEMU would have above in <code>dom0</code>. The toolstack (<code>xl</code>) can then connect directly to the UNIX socket and the rest is invisible to it.</li></ol><p>The qmp_helper must be started with the stub-domain ID where the QEMU it wants to talk to lives. There is an instance of qmp_helper per stub-domain. The QEMU instance in the stub-domain must be started with this version of the QMP parameter:</p><pre>-qmp v4v</pre><p>The QMP helper also needs changes to SELinux and the V4V firewall before it will work properly. If those changes are not yet implemented, QMP helper can still be tested by putting SELinux in permissive mode and flushing all the V4V firewall rules:</p><pre>$ nr</pre><pre>$ setenforce 0</pre><pre>$ viptables -F</pre><p>NOTE: the implementations currently resides here until it is brought into OpenXT proper:</p><p><a href=\"https://github.com/rossphilipson/xenclient-oe/blob/qmp_helper/recipes-openxt/qemu-dm/qemu-dm-1.4/0036-qmp-v4v-char-driver.patch\">https://github.com/rossphilipson/xenclient-oe/blob/qmp_helper/recipes-openxt/qemu-dm/qemu-dm-1.4/0036-qmp-v4v-char-driver.patch</a></p><p><a href=\"https://github.com/rossphilipson/xctools/tree/qmp_helper/qmp_helper\">https://github.com/rossphilipson/xctools/tree/qmp_helper/qmp_helper</a></p><h2>QMP Shell</h2><p>The QMP shell is a great tool for testing QMP stuffs. It is a set of python scripts that can basically send any QMP command to QEMU and receive any asynchronous events of the QMP channel that QEMU sends. First Python must be installed in <code>dom0</code> to use it. Before doing this, create some space in the rootfs using the instructions here: <ac:link><ri:page ri:content-title=\"Create Space on Target\"></ri:page></ac:link>. The following set of additional packages must be installed to get Python support:</p><ac:structured-macro ac:macro-id=\"7d2fbf6f-f5db-4ecd-b54e-639d49fa9325\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">text</ac:parameter><ac:plain-text-body><![CDATA[$ opkg install libpython2.7-1.0_2.7.9-r1_core2-32.ipk python-core_2.7.9-r1_core2-32.ipk python-lang_2.7.9-r1_core2-32.ipk python-re_2.7.9-r1_core2-32.ipk python-json_2.7.9-r1_core2-32.ipk python-codecs_2.7.9-r1_core2-32.ipk python-math_2.7.9-r1_core2-32.ipk python-crypt_2.7.9-r1_core2-32.ipk python-netclient_2.7.9-r1_core2-32.ipk python-mime_2.7.9-r1_core2-32.ipk python-datetime_2.7.9-r1_core2-32.ipk python-io_2.7.9-r1_core2-32.ipk python-logging_2.7.9-r1_core2-32.ipk python-textutils_2.7.9-r1_core2-32.ipk python-contextlib_2.7.9-r1_core2-32.ipk python-pickle_2.7.9-r1_core2-32.ipk python-stringold_2.7.9-r1_core2-32.ipk python-readline_2.7.9-r1_core2-32.ipk python-pprint_2.7.9-r1_core2-32.ipk]]></ac:plain-text-body></ac:structured-macro><p>Next locate the files <code>qmp-shell</code> and <code>qmp.py</code> under the <code>QMP</code> directory in the <code>qemu-1.4.1</code> tree. These files an be copied together anywhere in the dom0. Once the shell is running, tabbing will auto-complete showing a list of commands. Hitting enter with no commands will show any asynchronous messages that may have arrived.</p><p> </p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
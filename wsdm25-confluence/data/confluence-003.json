{
    "id": "confluence-003",
    "title": "BuildBot",
    "url": "https://openxt.atlassian.net/wiki/spaces/BS/pages/14844055/BuildBot",
    "content": "<p>Owned by Ross Philipson\nLast updated: Sep 25, 2015 by Ross Philipson\n\n</p><p><ac:structured-macro ac:macro-id=\"1560c2b7-aa45-4d46-a6b8-ee2f9ccd3696\" ac:name=\"toc\" ac:schema-version=\"1\"></ac:structured-macro></p><p>Using <a href=\"http://buildbot.net/\">BuildBot</a> can be useful to automate OpenXT builds.</p><p>Let's assume you're running a 32bits installation of Debian Squeeze, which is the recommended configuration for building OpenXT.<br/>Installing BuildBot is as easy as \"apt-get install buildbot\". The Squeeze version is quite outdated, but it does the job.</p><p>BuildBot works in 2 parts, the slave(s) that build, and the master that control the slave(s).<br/>In the following, I'm describing a setup with just one master and one slave, both on the same machine.</p><p><strong>Disclaimer</strong>: everything here is done in a pretty dummy way, there's a lot of room for improvement.</p><h2>Creating the master and the slave</h2><p>The configuration happens in /var/lib/buildbot for the master/slave configuration, and in /etc/default/buildbot for the deamon configuration.<br/>To get started, \"cd /var/lib/buildbot\" as root (or as buildbot, after enabling its shell), and create a master and a slave:</p><pre><code>$ buildbot create-master master\n$ cd master\n$ mv master.cfg.sample master.cfg\n$ cd ..\n$ buildbot create-slave slave 127.0.0.1:9989 slave password\n$ cd master</code></pre><h2>Configuring the master</h2><p>master.cfg is the main BuildBot file. That's where you define projects, steps and schedulers. Here's some modifications I made to it:</p><ul><li>Renaming the \"BuildSlave\" from \"bot1name\" to \"slave\", and changing the password from \"bot1passwd\" to \"password\".</li><li>Disable the scheduler by commenting out the <code>c['schedulers'].append</code> line(s).</li><li><p>Fix the factory steps (the scripts are detailed in the \"Creating the build scripts\" section):</p><pre><code>f1.addStep(Compile(command=[\"bash\", \"-e\", \"./fetch.sh\"], name=\"Fetch\", description=\"Fetch\", descriptionDone=\"Fetched\"))\nf1.addStep(Compile(command=[\"bash\", \"-e\", \"./clean.sh\"], name=\"Clean\", description=\"Clean\", descriptionDone=\"Cleaned\"))\nf1.addStep(Compile(command=[\"bash\", \"-e\", \"./build.sh\"], name=\"Build\", description=\"Build\", descriptionDone=\"Built\"))\nf1.addStep(Compile(command=[\"bash\", \"-e\", \"./copy.sh\"],  name=\"Copy\",  description=\"Copy\",  descriptionDone=\"Copied\"))\n</code></pre></li><li><p>In b1, the builder, fix the name (\"openxt\") the slavename (\"slave\"), and the builddir (\"/home/buildbot\")</p></li><li>Set allowForce=true, as described in a comment</li><li>Fix the project name and URL</li></ul><h2>Configuring the initscript</h2><p>Below is the content of my <code>/etc/default/buildbot</code></p><ac:structured-macro ac:macro-id=\"c99002bf-1573-4354-a392-d38631549f76\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"title\">initscript</ac:parameter><ac:plain-text-body><![CDATA[# buildbots to manage\n# add a new set of variables for each buildbot to start\n\nBB_NUMBER[0]=0          # index for the other values; negative disables the bot\nBB_NAME[0]=\"master\"     # short name printed on startup / stop\nBB_USER[0]=\"buildbot\"       # user to run as\nBB_BASEDIR[0]=\"/var/lib/buildbot/master\"        # basedir argument to buildbot (absolute path)\nBB_OPTIONS[0]=\"\"        # buildbot options\nBB_PREFIXCMD[0]=\"\"      # prefix command, i.e. nice, linux32, dchroot\n\nBB_NUMBER[1]=1                  # index for the other values; negative disables the bot\nBB_NAME[1]=\"slave\"              # short name printed on startup / stop\nBB_USER[1]=\"buildbot\"           # user to run as\nBB_BASEDIR[1]=\"/var/lib/buildbot/slave\"                # basedir argument to buildbot (absolute path)\nBB_OPTIONS[1]=\"\"                # buildbot options\nBB_PREFIXCMD[1]=\"\"              # prefix command, i.e. nice, linux32, dchroot]]></ac:plain-text-body></ac:structured-macro><h2>Creating the build scripts</h2><p>In /home/buildbot/build, I created the scripts corresponding to the steps added to the factory:</p><ac:structured-macro ac:macro-id=\"588d3c90-f4e6-4eac-b991-01d6ae7a3603\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">bash</ac:parameter><ac:parameter ac:name=\"title\">clean.sh</ac:parameter><ac:plain-text-body><![CDATA[#!/bin/bash\n\numask 0022\nrm -rf build\nmkdir build]]></ac:plain-text-body></ac:structured-macro><p>That removes the whole build tree and create an empty folder for the new build.<br/>If the previous build finished, or at least lasted for a while, this step could take more than 60 minutes...</p><p>One way to speed this up which is left out here for clarity is to put the build on a filesystem on a block device which is unmounted, reformatted and mounted for each build.</p><ac:structured-macro ac:macro-id=\"41cf6db1-cdf7-42df-a752-7bb94f61e990\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">bash</ac:parameter><ac:parameter ac:name=\"title\">fetch.sh</ac:parameter><ac:plain-text-body><![CDATA[#!/bin/bash\n\nfor i in git/*.git; do\n    echo \"Fetching `basename $i`...\"\n    cd $i\n    git fetch --all\n    cd - > /dev/null\ndone]]></ac:plain-text-body></ac:structured-macro><p><span>This fetches all the repository for the local git mirror.</span><br/><span>The fetch should take less than 10 seconds, hopefully not enough time for somebody to push half a feature!</span></p><ac:structured-macro ac:macro-id=\"d379fb92-803b-4b6a-ae9f-d4e71e774f66\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">bash</ac:parameter><ac:parameter ac:name=\"title\">build.sh</ac:parameter><ac:plain-text-body><![CDATA[#!/bin/bash -ex\n\numask 0022\ncd build\ngit clone file:///home/buildbot/build/git/openxt.git\ncd openxt\ncp -r ../../certs .\ncp example-config .config\ncat <<EOF >> .config\nOPENXT_GIT_MIRROR=\"file:///home/buildbot/build/git\"\nREPO_PROD_CACERT=\"/home/buildbot/build/certs/prod-cacert.pem\"\nREPO_DEV_CACERT=\"/home/buildbot/build/certs/dev-cacert.pem\"\nREPO_DEV_SIGNING_CERT=\"/home/buildbot/build/certs/dev-cacert.pem\"\nREPO_DEV_SIGNING_KEY=\"/home/buildbot/build/certs/dev-cakey.pem\"\nEOF\n./do_build.sh | tee build.log\nret=${PIPESTATUS[0]}\ncd -\ncd -\n\nexit $ret]]></ac:plain-text-body></ac:structured-macro><p><span><span>This step clones the main openxt repo and overwrites some config bits to match the setup.</span><br/><span>This assumes that a valid set of certificates has been created in <code>/home/buildbot/build/certs</code></span></span></p><ac:structured-macro ac:macro-id=\"6a9b58bc-dcba-42cd-87dd-967b8f18c55b\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">bash</ac:parameter><ac:parameter ac:name=\"title\">copy.sh</ac:parameter><ac:plain-text-body><![CDATA[#!/bin/bash\n\numask 0022\ncp build/openxt/build-output/openxt-dev--master/iso/installer.iso /var/www/openxt/installer.iso]]></ac:plain-text-body></ac:structured-macro><p><span><span><span>This steps copies the resulting OpenXT iso to the local web server, assuming that buildbot has write access to <code>/var/www/openxt</code></span></span></span></p><h2>Mirroring the repositories</h2><pre><code>$ cd /home/buildbot/build\n$ mkdir git\n$ for i in blktap.git bootage.git dm-agent.git dm-wrapper.git fbtap.git gene3fs.git icbinn.git idl.git input.git installer.git ioemu.git ioemu-pq.git ipxe-pq.git libedid.git libpciemu.git libxcdbus.git libxenbackend.git linux-3.11-pq.git manager.git meta-selinux.git msi-installer.git network.git ocaml.git openxt.git polmod-example.git pv-linux-drivers.git qemu-dm.git qemu-dm-pq.git refpolicy-xt-pq.git resized.git sdk.git seabios.git seabios-pq.git selinux-policy.git surfman.git sync-client.git sync-cli.git sync-database.git sync-server.git sync-ui-helper.git sync-wui.git toolstack-data.git toolstack.git uid.git v4v.git win-tools.git xblanker.git xclibs.git xctools.git xc-vusb-daemon.git xc-vusb.git xc-windows.git xenaccess.git xenaccess-pq.git xenclient-oe-extra.git xenclient-oe.git xen-common-pq.git xenfb2.git xsm-policy.git; do git clone --mirror git://github.com/OpenXT/$i git/$i; done\n$ chown -R buildbot *\n</code></pre><p>Or run replicate_github.py from<a href=\"https://github.com/dickon/scripts/blob/master/replicate_github.py\">https://github.com/dickon/scripts/blob/master/replicate_github.py</a> like this:</p><pre><code>$ mkdir /home/buildbot/build/git\n$ replicate_github.py openxt /home/buildbot/build/git</code></pre><h2>Starting and testing</h2><pre><code>$ /etc/init.d/buildbot stop\n$ /etc/init.d/buildbot start\n</code></pre><p>Then open <a href=\"http://127.0.0.1:8010/\">http://127.0.0.1:8010</a> in a web browser.<br/>As the scheduler is disabled, the only way to start a build is to force it, in the builder page.</p><h2>Windows builds</h2><p>Buildbot buildslaves can run on Windows. See <a href=\"https://github.com/OpenXT-Extras/build-machines/blob/master/buildmaster/buildbot2.cfg\">https://github.com/OpenXT-Extras/build-machines/blob/master/buildmaster/buildbot2.cfg</a> for a complex configuration of buildbot that includes Windows builds.</p><h2>Reproducible builds</h2><p>The steps above will build whatever is at the tip of master. Git does not store the history of what was head at a specific time, so even if you know from timestamps when your build was completed with the technique above in general you can't get back to the source code for that build.</p><p>The OpenXT build scripts all have support for building a specific tag. A procedure for using this might be: (<em>I say might because I'm still working on this - <a href=\"mailto:Dickon@cantab.net\">Dickon@cantab.net</a> 2 September 2014</em>)</p><ol><li>This would allow you to replicate all the github openxt repos (maybe using<a href=\"https://github.com/dickon/scripts/blob/master/replicate_github.py\">https://github.com/dickon/scripts/blob/master/replicate_github.py</a>), so that you can create tags in the replicas. If you have work in progress that has not yet been merged into openxt you may also want to overlay those central openxt github repos with some with additional changes on the branches you care about.</li><li>Then, run <a href=\"https://github.com/dickon/build-machines/blob/master/do_tag.py\">https://github.com/dickon/build-machines/blob/master/do_tag.py</a> to create a tag at the head of each branch across every repository that is in use, then</li><li>run <a href=\"https://github.com/OpenXT/openxt/blob/master/do_build.sh\">https://github.com/OpenXT/openxt/blob/master/do_build.sh</a></li><li>Publish both the github replica containing your tags and the build output. It is possible to work back from an installed machine with that build to all the source code using the tag number in the UIVM and dom0 filesystem.</li></ol><p>Note that you don't necessarily need to use buildbot to run this (and in fact Dickon isn't doing so yet during development).</p><p>See <a href=\"https://github.com/dickon/scripts/blob/master/build_tag.sh\">https://github.com/dickon/scripts/blob/master/build_tag.sh</a> for a script which does this, evolving the build.sh above to add support. Usage would be something like:</p><pre><code>$ build_tag.sh -u dickon -r dickonr@tezcat.xen-client.com:/data/openxt-www/platform cam tagging /build/dickonr/build\n</code></pre><p>Current output is at <a href=\"http://openxt.xci-test.com/platform/\">http://openxt.xci-test.com/platform/</a></p><p>Next step is to explore using a source manifest file that lists the commits used on each repo, so that the source manifest can be included in the builds. Possibly use<a href=\"https://source.android.com/source/using-repo.html\">https://source.android.com/source/using-repo.html</a> and possibly avoid the local git cloning.</p><h2>Windows builds</h2><p>The above only builds the OpenXT platform using do_build.sh and OpenEmbedded. The same technique should work on Windows.</p><p>Currently OpenXT can be built with the Windows and Linux VM tools integrated into the platform build. This puts quite a lot of complexity into the buildbot configuration since the tags and intermediate build binaries need to be transferred across multiple machines with different operating systems.</p><p>(<em>Work in progress - Dickon Reed, 2 September 2014</em>). A simple approach would be to handle tagging, building and distribution of tools (and maybe syncXT server side) separately to the platform build. This would change the way users install tools, perhaps in a positive way. It also introduces issues with version skew. For me the overriding concern is getting a simple and maintainable automated Windows build together on OpenXT. So, the idea would be to run replicate_openxt.py and do_tag.py on Windows and then winbuild-prepare.ps1 and winbuild-all.ps1, and again distribute the tagged git repos with the resulting binary ZIP file. Code to do a Windows build this way is at<a href=\"https://github.com/dickon/openxt/blob/tagging/windows/build_tag.ps1\">https://github.com/dickon/openxt/blob/tagging/windows/build_tag.ps1</a> and the output can be browsed at <a href=\"http://openxt.xci-test.com/windows/\">http://openxt.xci-test.com/windows/</a>. do_tag.py would be configured to use a different repositories.txt (such as<a href=\"https://github.com/dickon/openxt/blob/tagging/windows/build_tag.ps1\">https://github.com/dickon/openxt/blob/tagging/windows/build_tag.ps1</a>) which only lists the Windows repos and idl, and the Windows repos would be removed from the platform repositories.txt. This means that platform changes would not require new Windows tools builds, and Windows tools changes would not requite platform builds. Note that Dickon is not actually using buildbot yet to trigger this.</p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "BS"
}
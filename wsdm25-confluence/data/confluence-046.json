{
    "id": "confluence-046",
    "title": "OpenXT Migration to Xen Server Windows PV Drivers",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/35225705/OpenXT+Migration+to+Xen+Server+Windows+PV+Drivers",
    "content": "<p>Owned by Steve Meisner\nLast updated: May 02, 2016 by Steve Meisner\n\n</p><h1>OpenXT Windows in-guest PV Drivers</h1><h2>Preface</h2><p>In an attempt to reduce duplication of effort and source code maintenance, the Windows in-guest paravirtualized drivers used with OpenXT (<a href=\"http://openxt.org/\">http://openxt.org</a>) will be replaced with those used by the XenServer distribution (<a href=\"http://xenbits.xen.org/gitweb/\">http://xenbits.xen.org/gitweb</a>).  Along with a reduction of effort, the XenServer drivers have been in existence, and being tested, for many years. They have also been certified by the Microsoft driver signing program (WHQL). Leveraging these ideas will create a much more reliable user experience when using Windows guests with OpenXT.</p><h2>Scope</h2><p>This document will cover the following details:</p><ul><li>create a build system</li><li>setup a development environment</li><li>access source code</li><li>how to create and apply patches</li><li>integrate custom OpenXT Windows PV drivers to be included in the final installer</li><li>perform builds</li></ul><p>These details will be described from the automated build system perspective, as well as from the developer’s. Explanations of what PV drivers are, what Xen is, how to use GIt, how to manage Jenkins CI build systems or general coding practices will not be included here. It is assumed the reader is familiar with all of the above. If not, stop now and go read up…</p><h2>Source Code Repository Organization</h2><p>The following repositories currently exist on Github;</p><p>There are the following XenServer repos: one repo per PV driver:</p><ul><li>win-xenbus</li><li>win-xenvbd</li><li>win-xeniface</li><li>win-installer</li><li>win-xennet</li><li>win-xenvif</li><li>win-xenvss</li></ul><p>There is a single OpenXT repo that includes all OpenXT drivers and components:</p><ul><li>oxt-windows</li></ul><p>There will be a number of patch queue repos hosted on Github. Currently, there is only one for win-installer, but there will be more in the future (e.g., to allow for virtual USB devices to be enumerated by XenBus.)</p><p><ac:image ac:height=\"400\"><ri:attachment ri:filename=\"XS.JPG\"></ri:attachment></ac:image></p><p><br/><br/></p><p>Above is a simple depiction of the organization of the source code repositories, build machine and resulting MSI installer to add the PV drivers to a Windows guest.</p><p>The central point, the Jenkins Continuous Integration server is what brings all of the components together, builds them and creates the installer. Jenkins will poll the various repositories looking for any changes and launch a build when needed.</p><p>The ‘Patch Queue Repo’ balloon represents any repos that include patches required to the XenServer drivers to allow them to work within the OpenXT environment. The Jenkins server will, after fetching the sources, apply the patches prior to building the XenServer PV drivers.</p><h2>Windows Installer Build Environment</h2><p>As shown above, there are multiple Git based source code repositories that make up the final installer. The XenServer repos are based on one repo per driver (e.g., xenbus, xenvbd, xeniface, xenvif, xennet) (<a href=\"https://github.com/xenserver/\">https://github.com/xenserver/</a>...) and one for win-installer. The OpenXT PV drivers are all included in a single Github repository (<a href=\"https://github.com/meisners/oxt-windows\">https://github.com/meisners/oxt-windows</a>).</p><h2>XenServer PV Driver Patching</h2><h3>Patch Queues</h3><p>As downstream source code changes are created, these changes should be captured as Git formatted patches. Prior to committing a patch, it should be sent to the maintainer(s) of the patch queue repository for approval.</p><p>Within the developer’s environment, Git Guilt is to be used to maintain patches. The server environment uses Git Quilt to apply the patches prior to building.</p><p>The flow should be something like:</p><ul><li>Clone a XenServer repository<ul><li><pre>git clone <a href=\"https://github.org/xenserver/win-installer.git\">https://github.org/xenserver/win-installer.git</a></pre></li></ul></li><li>Clone the related patch queue repository from GitHub into the .git/patches folder:<ul><li><code>cd win-installer</code></li><li><code>git clone <a href=\"https://github.com/meisners/win-installer-pq\">https://github.com/meisners/win-installer-pq</a> .git/patches</code></li></ul></li><li>Make changes to a module (verified with local builds and tests)</li><li>Generate a patch file (this example captures the diff of changes made to build.py):<ul><li><code>git diff --cached build.py &gt; .git/patches/build-py_xyz.patch</code></li></ul></li><li>Commit the resultant patch file to the patch queue repository (be sure to update the series file; 3<sup>rd</sup> step below):<ul><li><code>cd .git/patches</code></li><li><code>git add build-py_xyz.patch</code></li><li><code>ls -1 *.patch &gt; series</code></li><li><code>git commit -m “New patch” -s</code></li><li><code>git push</code></li></ul></li></ul><p> </p><table><tbody><tr><td><div><p>Note: In the above example of creating a patch, the idea of including the name of the patched module being included in the name of the patch is introduced. This helps to identify patches in the repo.</p></div></td></tr></tbody></table><p> </p><h2>Build Server Environment</h2><h3>Build Server Requirements</h3><p>The build environment will be based on Jenkins CI automated builder. The following tools must be installed:</p><ul><li>Microsoft Windows Server 64-bit</li><li>Jenkins v1.643</li><li>Python v3.5.1 64-bit</li><li>Visual Studio Premium 2012 v11.0.50727.26</li><li>Visual Studio 2012 Update 4</li><li>Windows Driver Framework Package v2.0.3620.0</li><li>Windows Driver Kit v8.59.29757.0</li><li>WiX Toolset v3.8.1128.0</li><li>Cygwin 2.4.1 x64</li><li>Git for Windows v2.6.4.0 64-bit</li><li>NodeJS v4.2.6 64-bit     ß MAY NOT BE NEEDED ON THE SERVER</li></ul><p>The following Jenkins plugins will also be included:</p><ul><li>Cygpath</li><li>Cygwin Process Killer</li><li>ThinBackup</li><li>Git Plugin</li><li>Git Changelog</li><li>All Changes</li><li>Status Monitor</li><li>Build Monitor View</li></ul><h3>Build Environment Configuration</h3><p>When building the installer, the build scripts need to know how to access all of the other binaries that were built as a result of the other projects (such as the XenServer PV drivers). The way the script is written, it expects all 32 and 64-bit output folders to be off a single directory structure, so the easiest way is to create a new folder (such as C:\\Builds) and create hard links to all the necessary output folders. As an example:</p><blockquote><pre>cd /d C:\\</pre><pre>mkdir Builds</pre><pre>cd Builds</pre><pre>mklink /D xenbus C:\\source\\win-xenbus\\xenbus</pre><pre>mklink /D xenvss C:\\source\\win-xenvss\\xenvss</pre><pre>mklink /D xenvbd C:\\source\\win-xenvbd\\xenvbd</pre><pre>mklink /D xenvif C:\\source\\win-xenvif\\xenvif</pre><pre>mklink /D xennet C:\\source\\win-xennet\\xennet</pre><pre>mklink /D xeniface C:\\source\\win-xeniface\\xeniface</pre><pre>mklink /D xenguestagent C:\\source\\win-xenguestagent\\xenguestagent</pre><pre>mklink /D xenprep C:\\source\\win-installer\\xenprep</pre><pre>mklink /D setup C:\\source\\win-installer\\setup</pre><pre>mklink /D Libraries C:\\source\\win-installer\\Libraries</pre><pre>mklink /D installwizard C:\\source\\win-installer\\installwizard</pre><pre>mklink /D InstallAgent C:\\source\\win-installer\\InstallAgent</pre><pre>mklink /D BrandSupport C:\\source\\win-installer\\BrandSupport</pre><pre>mklink /D Uninstall C:\\source\\win-installer\\Uninstall</pre><pre>mklink /D xenaud C:\\source\\oxt-windows\\Build\\Release\\xenaud</pre><pre>mklink /D xeninp C:\\source\\oxt-windows\\Build\\Release\\xeninp</pre><pre>mklink /D xenvesado C:\\source\\oxt-windows\\Build\\Release\\xenvesado</pre></blockquote><h3>Jenkins Continuous Integration Environment</h3><p>Within Jenkins Configuration, set the following environment variables:</p><ul><li><pre>CYGPATH=/usr/local/<a href=\"http://bin/usr/bin:/:/cygdrive/c/Program\">bin:/usr/bin:/:/cygdrive/c/Program</a> Files/Python35/<a href=\"http://Scripts/cygdrive/c/Program\">Scripts:/cygdrive/c/Program</a> Files/<a href=\"http://Python35/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Program\">Python35:/cygdrive/c/Windows/system32:/cygdrive/c/Windows:/cygdrive/c/Windows/System32/Wbem:/cygdrive/c/Windows/System32/WindowsPowerShell/v1.0:/cygdrive/c/Program</a> Files/Microsoft SQL Server/110/Tools/<a href=\"http://Binn/cygdrive/c/Program\">Binn:/cygdrive/c/Program</a> Files/Git/<a href=\"http://cmd/cygdrive/c/Program\">cmd:/cygdrive/c/Program</a> Files/<a href=\"http://nodejs/cygdrive/c/Users/oxtuser/AppData/Roaming/npm\">nodejs:/cygdrive/c/Users/oxtuser/AppData/Roaming/npm</a></pre></li></ul><p> </p><table><tbody><tr><td><div><p>Note: The CYGPATH setting is copied from the PATH setting when a Cygwin terminal is brought up</p></div></td></tr></tbody></table><p> </p><ul><li><pre>CYGWIN=nodosfilewarning</pre></li><li><pre>KIT=C:\\Program Files (x86)\\Windows Kits\\8.0</pre></li><li><pre>SYMBOL_SERVER=C:\\Builds\\Symbols</pre></li><li><pre>VS=C:\\Program Files (x86)\\Microsoft Visual Studio 11.0</pre></li><li><pre>WIX=C:\\Program Files (x86)\\Wix Toolset v3.8\\</pre></li></ul><p>In Jenkins, set Shell Executable:</p><ul><li><pre>Shell Executable: C:\\cygwin64\\bin\\bash.exe</pre></li></ul><h3>Performing Builds</h3><h2>Developer Environment</h2><h3>Developer Environment Requirements</h3><p>The developer environment will be based on a Microsoft Windows desktop operating system. Additional products/tools that must be installed include:</p><ul><li>Microsoft Windows 64-bit desktop OS (such as Windows 10 x64)<ul><li>Need appropriate license (such as MSDN)</li></ul></li><li>Python 64-bit V3.5.1<ul><li><a href=\"https://www.python.org/ftp/python/3.5.1/python-3.5.1-amd64.exe\">https://www.python.org/ftp/python/3.5.1/python-3.5.1-amd64.exe</a>Visual Studio Premium 2012 v11.0.50727.26Need proper license (such as MSDN)</li></ul></li><li>Visual Studio 2012 Update 4<ul><li><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=39305\">https://www.microsoft.com/en-us/download/details.aspx?id=39305</a></li></ul></li><li>Windows Driver Framework Package v2.0.3620.0<ul><li>See: <a href=\"https://msdn.microsoft.com/en-us/windows/hardware/hh852365.aspx\">https://msdn.microsoft.com/en-us/windows/hardware/hh852365.aspx</a></li></ul></li><li>Windows Driver Kit v8.59.29757.0<ul><li>See: <a href=\"https://msdn.microsoft.com/en-us/windows/hardware/hh852365.aspx\">https://msdn.microsoft.com/en-us/windows/hardware/hh852365.aspx</a></li></ul></li><li>WiX Toolset v3.8.1128.0<ul><li><a href=\"https://wix.codeplex.com/downloads/get/762937\">https://wix.codeplex.com/downloads/get/762937</a></li></ul></li><li>Git 64-bit for Windows V2.6.2 or later<ul><li><a href=\"https://git-scm.com/download/win\">https://git-scm.com/download/win</a></li></ul></li></ul><p>The following environment variables must be set (either in the System Properties, Advanced System Settings, Environment Variables or via a batch script file):</p><ul><li><pre>KIT=C:\\Program Files (x86)\\Windows Kits\\8.0</pre></li><li><pre>SYMBOL_SERVER=C:\\Builds\\Symbols</pre></li><li><pre>VS=C:\\Program Files (x86)\\Microsoft Visual Studio 11.0</pre></li><li><pre>WIX=C:\\Program Files (x86)\\Wix Toolset v3.8\\</pre></li></ul><p>The following are required for Git Guilt:</p><ul><li>NodeJS (<a href=\"http://nodejs.org/\">http://nodejs.org/</a>)<ul><li>I used the LTS (Mature and Dependable) version v4.3.0 at the time of this writing</li><li>And, yes, Git Guilt requires JavaScript support for Windows</li></ul></li><li>Git Guilt (<a href=\"https://bitbucket.org/tpettersen/git-guilt\">https://bitbucket.org/tpettersen/git-guilt</a>)</li><li>npm is- not required as mentioned on the git-guilt site, so that can be skipped</li></ul><p>To install Guilt (Copied from the git-guilt site):</p><ul><li>Install <a href=\"http://git-scm.com/\">Git</a>, <a href=\"http://nodejs.org/\">Node.js</a> (tested against v0.10.3) and <a href=\"https://npmjs.org/\">npm</a></li><li>Run <code>npm\ninstall -g git-guilt</code>. You may need <code>sudo</code>.</li><li>Run <code>git-guilt\nHEAD~1 HEAD</code> in any git repository to see the blame delta for the last commit.</li></ul><p>The screenshot below shows the install and a test run within a Mingw terminal window:</p><p><ac:image ac:height=\"400\"><ri:attachment ri:filename=\"XS2.JPG\"></ri:attachment></ac:image></p><p>Notice the Git Guilt command was run within an existing cloned repo (Win-Installer).</p><p>At this point, each of the individual XenServer projects should be able to be built. Start a Command Prompt window and issue the following command:</p><pre>build.py free nosdv</pre><p>The ‘nosdv’ will keep the Microsoft Static Driver Verifier from being run. This is a very good tool, but takes a long time to run. So while developing your patches, you can skip running it. If wanted, just leave off the ‘nosdv’ and it will be run.</p><p>Prior to being able to build the installer, the section on creating the linked directories found elsewhere in this document must be performed. A single folder must be created in the directory structure where the win-installer build script can find all of the binaries necessary to build the installer.</p><h3>Performing Local Builds</h3><p>Now the installer can be built as follows:</p><pre>build.py --local C:\\Builds</pre><h3>Repositories &amp; Patch Queues</h3><p>Each XenServer software component is a separate GitHub repository. For example, each of the PV drivers are individual repositories. All XenServer source repositories are located on GitHub:</p><p><a href=\"https://github.com/xenserver\">https://github.com/xenserver</a></p><p>Within the above site, all other projects can be located. If you search for a particular driver (e.g., xenvbd) you will be brought directly to the repository.</p><p>The patch queues repos are stored in different organization names (i.e., not under the XenServer GitHub organization). These repositories are to keep patches needed to build the XenServer installation kit suited to OpenXT’s needs. Any patches created should be shared with the community (the XenServer team especially) to give them the opportunity to integrate them into their code. If they do, that’s a win since it will keep the deviation from master as limited as possible, as well as giving the author of the patch kudos! And if it’s an improvement/bug fix, it makes XenServer drivers even better.</p><h2>Build Server System Maintenance</h2><h3>Backups</h3><p>Every weekday at 12:00, ThinBackup is run. This creates a local backup of all job configs and Jenkins config. There is a Jenkins job that runs every weekday at 13:00 that does an rsync of the local backup area to the Synology Rackstation (location is /volume1/XenServer). To allow this to work, password-less access was used and a public key was saved to /root/.ssh on the Rackstation. The private key is stored on the Jenkins server in /home/SYSTEM/.ssh in a Cygwin terminal. This location maps to C:\\cygwin64\\home\\SYSTEM\\.ssh.</p><p>I could not get a non-root account to work rsync’ing to the Synology, this is why root was used as the remote user.</p><h2>Troubleshooting</h2><h3>Git guilt claims an ‘Unsupported version of Git’</h3><p>[Cygwin guilt, so server only] The script that implements guilt must be modified. This is a known problem, but the fastest way to fix it is to modify /usr/bin/guilt:</p><blockquote><p>#</p><p># Git version check</p><p>#</p><p>gitver=`git --version | cut -d' ' -f3 | sed -e 's/^debian\\.//'`</p><p>case \"$gitver\" in</p><p>      1.5.*)  ;; # git config</p><p>      1.6.*)  ;; # git config</p><p>      1.7.*)  ;; # git config</p><p>      1.8.*)  ;; # git config</p><p>      1.9.*)  ;; # git config</p><p>      2.7.*)  ;; # git config</p><p>      *)    die \"Unsupported version of git ($gitver)\" ;;</p><p>esac</p></blockquote><p>The case statement must have “2.7.*” added as a valid choice.</p><h3>Invalid command reported:</h3><p>[Cygwin guilt, so server only] The guilt script is using an improper parameter notation for a find command. Locate and modify the following lines:</p><blockquote><pre>guilt_commands()</pre><pre>{</pre><pre>      find \"`dirname $0`/../lib/guilt\" -maxdepth 1 -name \"guilt-*\" -type f -perm /+111 2&gt; /dev/null | sed -e \"s/.*\\\\/`basename $0`-//\"</pre><pre>      find \"`dirname $0`\" -maxdepth 1 -name \"guilt-*\" -type f -perm /+111 | sed -e \"s/.*\\\\/`basename $0`-//\"</pre><pre>}</pre></blockquote><p>The change is the ‘-perm /+111’ parameter. The original script has ‘-perm +111’.</p><p> </p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
{
    "id": "confluence-137",
    "title": "Windows HVM Debugging",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/14843969/Windows+HVM+Debugging",
    "content": "<p>Owned by Ross Philipson\nLast updated: Jan 05, 2018 by Steve Meisner\n\n</p><p class=\"auto-cursor-target\"><br/></p><ac:structured-macro ac:macro-id=\"74999113-0dad-488e-82fb-d0536146128f\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><p><ac:image ac:width=\"80\"><ri:attachment ri:filename=\"cc-by.png\" ri:version-at-save=\"1\"><ri:page ri:content-title=\"Documentation Guidelines\" ri:space-key=\"OD\" ri:version-at-save=\"12\"></ri:page></ri:attachment></ac:image></p><p>Copyright 2014 by Citrix Systems Inc. Created by Ross Philipson &lt;<a href=\"mailto:philipsonr@ainfosec.com\">philipsonr@ainfosec.com</a>&gt;. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"http://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\">http://creativecommons.org/licenses/by/4.0/</a>.</p></ac:rich-text-body></ac:structured-macro><p><span><br/></span></p><p><span><ac:structured-macro ac:macro-id=\"45bbddea-2c65-4b13-b7eb-fcc6baa0b869\" ac:name=\"toc\" ac:schema-version=\"1\"></ac:structured-macro><br/></span></p><h2><span>Debugging Windows HVM guests in OpenXT</span></h2><p>For guest HVM debugging, both the host (debugger) and target VM (debuggee) must be configured. The following steps outline setting this up using serial debugging. Note the serial port on the target side is a virtual serial port emulated by qemu.</p><p><strong>Note:</strong> On OpenXT platforms, be sure to either disable stubdomains, or modify them as noted in the section below.</p><p><strong>TODO:</strong> Reformat this section, it is a bit of a mess.</p><p><u>On the host computer (the debugger):</u></p><ul><li>Install the Debugging Tools For Windows if you do not have them. You will also need to setup symbol and source code paths. The WinDbg documentation describes how to do this. The package can be found here:<br/><pre>http://www.microsoft.com/whdc/DevTools/Debugging/default.mspx\n</pre>It seems recently that the Debugging Tools For Windows have been moved into the WDK/SDK/Visual Studio installs so to get the most recent versions, this is where to look.</li><li>Setup the symbol path. This is done in Control Panel -&gt; System -&gt;Advanced -&gt; Environment Variables. Make a New System environment variable like the one shown below. The first part of the following sets up C:\\Mydir\\symbols for local symbols. The second part after the ; is pulling public symbols from MS down into a local cache in C:\\Mydir\\symwin.<br/><pre> _NT_SYMBOL_PATH = C:\\Mydir\\symbols;SRV*C:\\Mydir\\symwin*http://msdl.microsoft.com/download/symbols\n</pre></li><li>Get a copy of sockpipe.exe. This tool should be built during the standard Windows build process, and can be found in xc-windows/sockpipe. </li><li>Run sockpipe.exe from the command line as follows:<br/><pre>sockpipe.exe debugpipe 7204\n</pre><ul><li>You may want to create a shortcut with the above arguments to streamline things. </li></ul></li><li>Run WinDbg with arguments for connected to the pipe created by sockpipe:<br/><pre>windbg -k com:pipe,port=\\\\.\\pipe\\debugpipe\n</pre></li><li>At this point WinDbg is connected to sockpipe via the pipe above and waiting for the target system to start. The sockpipe application is listening on a socket for an connection from the target HVM (from the qemu to be precise).</li><li>It's also possible to debug in a Visual Studio environment–see <a href=\"https://msdn.microsoft.com/en-us/library/windows/hardware/jj200334(v=vs.85).aspx\">Setting Up Kernel-Mode Debugging of a Virtual Machine in Visual Studio</a> on the MSDN.<ul><li>At the time of writing, Visual Studio 2015 suffers from a <a href=\"https://connect.microsoft.com/VisualStudio/feedback/details/2080376/fails-to-load-configure-devices\">bug</a> that blocks the \"configure test machines\" dialog--try configuring from VS2013 if this is a problem. </li></ul></li></ul><p><u>On the target XenClient computer (the debuggee):</u></p><ul><li>Boot the HVM you want to debug and create a boot entry for debugging. On XP it would involves adding a boot.ini entry. First the file needs to be unhidden and made writable:<br/><pre>C:\\&gt;attrib -r -h -s boot.ini\n</pre>The copy an existing line from the boot.ini file and paste a new one in - make it look like this:<br/><pre>multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS=\"Microsoft Windows XP Professional\" /debug /debugport=COM1 /baudrate=115200</pre></li><li>On Vista and Win7 you need to use the bcdedit tool to setup a new boot entry. First lauch a command windows as Administrator and do this:<br/><pre>bcdedit /copy {current} /d win7debug\n</pre>Then run msconfig from the same command windows. Select the Boot tab and locate your new win7debug boot entry. Select it and Advanced options. Check the Debug checkbox and in the Global debug settings section set the Debug port to COM1 and the Baud reate to 115200. Note that the Debugging Tools For Windows help has information on setting up both the host and target machines.</li><li>Shut the VM down and first disable SELinux - it will interfere with debugging. From a terminal in dom0:<br/><pre># disable for until reboot\nnr\nsetenforce 0\n\n# or disable forever, first you need to make the fs writeable\nrw\n# edit /etc/selinux/config and set to permissive\nro\n</pre></li><li>Next edit the xenvm config file for the VM. Add a virtual serial port to it that connect to the host machine as follows. The values can be set in a VM's config file using the folloiwing command in dom0 (note the nodelay option turns of naggling which can disrupt debugger operation):<br/><pre>db-write /vm/&lt;uuid&gt;/config/extra-xenvm/0 \"serial=tcp:&lt;ip&gt;:&lt;port&gt;,nodelay\"\n</pre>This also works:<br/><pre>xec-vm -n &lt;vmname&gt; set extra-xenvm \"serial=tcp:&lt;ip&gt;:&lt;port&gt;,nodelay\"\n</pre>The examples above have qemu connecting out to a listening sockpipe. You can also have qemu listen for incoming sockpipe connections (as a server) with the following (note the nowait will prevent qemu from waiting for a client connection):<pre>xec-vm -n &lt;vmname&gt; set extra-xenvm \"serial=tcp::&lt;port&gt;,server,nodelay,nowait\"</pre></li><li>Important: If XL is in use (as with later versions of OpenXT), be sure to format the xec-vm properly. For example:</li></ul><blockquote><p><span style=\"color: rgb(0,51,102);\">xec-vm -n Win7-XSPV set extra-xenvm \"serial=[\\\"tcp:192.168.1.60:7204,nodelay\\\"]\"</span></p></blockquote><p><br/></p><pre><br/></pre><ul><li>Before restarting the VM, make sure that the sockpipe listening app is running - QEMU will try to make a TCP connection to it. Also make sure there are not firewalls or other network issues that could prevent the connection. If QEMU cannot connect, it will spit out a message that looks like this:<br/><pre>Unknown internal error. Error code: 199. Message: Dm.Ioemu_failed(\"Device model 0 on dm-agent 8 died (status = unknown)\")\n</pre></li><li>Restart the HVM and select the debug boot entry. Early in the VM boot process the debugging session will connect.</li></ul><h2><span>Debugging with Stubdoms Enabled</span></h2><p>It is also possible to do the above Windows HVM debugging with stubdoms enabled but the stubdom initramfs must be modified to enable networking in qemu (note all of the stubdom is in an initramfs). Once this is done stubdom and SELinux can be left enabled during debugging which is closer to the real OpenXT environment. Note you will need to be able to assign a static IP address to the stubdom to make this work. There is no DHCP client in the stubdoms.</p><p>First get the stubdom initramfs, it can be found here: <code>/usr/lib/xen/boot/stubdomain-initramfs</code>. Make a copy and rename it with a <code>.gz</code> extension. Next it needs to be extracted:</p><pre>~/unpacked$ gunzip stubdomain-initramfs.gz\n~/unpacked$ sudo cpio -idv &lt; stubdomain-initramfs \n</pre><p>Next edit <code>~/unpacked/etc/xen/scripts/qemu-ifup</code> and change this line, obviously using a static address that makes sense:</p><pre> -    ifconfig $bridgename up\n +    ifconfig $bridgename 10.10.10.10/24 up\n</pre><p>Finally re-package the initramfs and replace it on the target:</p><pre>~/unpacked$ sudo find . | cpio -H newc -o &gt; ../my-modified-initramfs\n~/unpacked$ cd ..\n~$ gzip my-modified-initramfs</pre><h2><span>Firewire Debugging</span></h2><p>It is possible to do firewire debugging in a Windows guest if you allow the PCI device for firewire to be visible in the VM using pass-through. Unfortunately firewire debugging seems to be rather unreliable in most of the platforms on the HCL. Some of the HP laptops are known to work. The following configures a VM to pass-through a firewire device class: </p><pre>xec-vm -n &lt;name_of_my_vm&gt; add-pt-rule 0xc00 any any\n</pre><p>As with the instructions above for serial debugging, the target VM needs to be configured for firewire settings. On XP this is a boot.ini entry of the form:</p><pre>multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS=\"Microsoft Windows XP Professional\" /debug /debugport=1394 /channel=44\n</pre><p>On Vista and Win7, use the msconfig utility to setup the firewire settings. For the host, just run WinDbg, select File -&gt; Kernel Debug -&gt; 1394 and make sure the channel matches.</p><h2><span>User Mode Crashes</span></h2><p>Gathering crash dumps in user mode is also useful for debugging problems. The following article has details on generating crash dumps for faulting user mode applications:</p><pre>http://kb.acronis.com/content/2192\n</pre><p>The above article is useful for Windows XP and it also shows you how to gather a crash dump when a process is still running on Windows Vista/7. Unfortunately the process may not always still be running after the crash even thought he message box is still displayed (e.g. this seems to be the case for services). There is no Dr. Watson for Vista and 7 - it has been replaced by WER (Windows Error Reporting). WER automatically creates mini and heap dumps for faulting processes and stores them in the following queues (depending on whether it is a user or system process):</p><pre>%ALLUSERSPROFILE%\\Microsoft\\Windows\\WER\\ReportQueue\n\n%USERPROFILE%\\AppData\\Local\\Microsoft\\Windows\\wer\\ReportQueue \n</pre><p>These crash dumps have the extensions .mdmp and .hdmp and can be opened using WinDbg.</p><h2><span>Test Signed Drivers</span></h2><p><strong>TODO:</strong> This is all wrong now. The Powershell script do_sign.ps does the signing. This needs to be updated to indicate how to use this script.</p><p>This provides the steps that must be taken to install pv-drivers on x64 Windows version of Vista and later. These versions of Windows will not allow unsigned drivers to load and since xevtchn.sys is a boot start driver, this will prevent you from booting.</p><p>You can install unsigned drivers on your VM and for each boot choose F8 -&gt; Disable driver signature enforcement. But you must do this every boot.</p><p>Alternately you can test sign the drivers yourself and setup your VM to trust a test certificate. This will allow you to install your test signed drivers and boot normally. Older versions of the DDK do not have the inf2cat utility. Check to see if you have it, if not, before you begin you have to install the winqual sibmission tool in order to get the inf2cat executable. This can be found by going to the following link:</p><pre>https://winqual.microsoft.com/Help/Inf2cat_FAQ.htm\n</pre><p><span>You will also need to do \"path=%path%;c:\\program files\\microsoft winqual submission tool 2\" to add this to your path.</span></p><p><u>On the build machine:</u></p><ol><li>build 32-bit and 64-bit drivers</li><li>Run \"sign\\signtest.cmd\" from the root of the xc-windows enlistment to test sign the drivers</li><li>Run \"makensis.exe xensetup.nsi\" in the install directory to create the xensetup.exe package.</li></ol><p><u>On the client VM:</u></p><ol><li>On Vista or later run \"bcdedit /set testsigning on\"</li><li>Reboot</li><li>Install the test certificates. For this you need to get certmgr.exe and a mytest.cer signing cert that you made.<ol><li>Run \"certutil -addstore -f \"Root\" mytest.cer\"</li><li>Run \"certutil -addstore -f \"TrustedPublisher\" mytest.cer\"</li></ol></li><li>Install the test signed pv-drivers.</li></ol><p>This page contains information on creating certificates:<br/><a href=\"https://github.com/OpenXT/openxt/wiki/Windows-Build-Machine\">https://github.com/OpenXT/openxt/wiki/Windows-Build-Machine</a></p><h2><span>Crash Dump Analysis</span></h2><p>The WinDbg tool is also used for post mortem analysis of crash dump files. To load a crash dump file you simply start WinDbg and on the File menu select Open Crash Dump. This will load the dump file and relevant symbols (see above for setting up symbol paths). Once the file is loaded, command can be executed in the command window at the \"kd&gt;\" prompt. One of the most useful commands to run as a starting point is:</p><pre> kd&gt;!analyze -v\n</pre><p>This will do a top level analysis and print the results to the command window. When attaching or referencing crash dumps in tickets it would be very useful to also attach the output from this command as a text file. This makes it easy to do a very quick analysis of the ticket and make determinations about the steps to take.</p><h2><span>Symbols</span></h2><p>Sometimes it is useful to force a debugger to load symbol files for a module even though the checksum or some other meta-information does not match. The following link discusses this and has a tool for making updating PDB files so they match.</p><p><a href=\"http://www.debuginfo.com/articles/debuginfomatch.html\">http://www.debuginfo.com/articles/debuginfomatch.html</a></p><h2><span>Enabling PV driver debug output</span></h2><p>To change the debug output level of the PV drivers, there is a registry setting that must be added in the guest. The key called \"Parameters\" must be created under the xenevtchn service key. Then the value \"FeatureFlags\" (a 32-bit DWORD) is created under the \"Parameters\" key.</p><pre> [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\xenevtchn\\Parameters]\n \"FeatureFlags\"=dword:00000100\n</pre><p>Setting the above value (0x100) will enable all TraceXxx() output to the /var/log/messages file in dom0 as well as the serial console (if connected).</p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
{
    "id": "confluence-183",
    "title": "DBD (Database Daemon)",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/19431428/DBD+(Database+Daemon)",
    "content": "<p>Owned by Chris Patterson\nLast updated: Dec 16, 2015 by Chris Patterson\n\n</p><h2>Overview</h2><p>DBD provides a centralized database for the OpenXT platform.  It maintains an in-memory \"database\", a json tree, which it then partitions out into multiple database files.</p><p> </p><p>To navigate the json tree, DBD provides a concept of a filesystem-like \"path\", in which one can navigate the json object tree, concatenating path names with a \"/\".</p><p>e.g.  read(\"foo/bar\") or read(\"/foo/bar\") returns the value of \"bar\" under object \"foo\".</p><p> </p><h2>Database Partitioning</h2><p>There are three primary uses for the db:</p><ul><li>vm configuration</li><li>dom-store configuration</li><li>platform configuration</li></ul><p>The vm configuration, includes all (most) of the properties that the toolstack uses to configure a VM.  This is stored on disk in a per-vm file, /config/vms/&lt;vm-uuid&gt;.db</p><p>The dom-store configuration, is an optional per-vm data store.  This is stored on disk in a per-vm file: /config/dom-store/&lt;vm-uuid&gt;.db</p><p>The remaining configuration, used to store configuration state for most of the platform components, is stored in common file: /config/db</p><p> </p><h2>Database Consistency</h2><p>DBD ensures db consistency (on-disk) by writing out all db files whenever the tree is detected as being \"dirty\" (in-memory tree has been written to, but not yet flushed to disk).  It does this using a common pattern:</p><ul><li>write to tmp file on target partition (&lt;db-path&gt;.tmp)</li><li>synchronous flush to disk</li><li>move tmp file to db file (mv &lt;db-path&gt;.tmp &lt;db-path&gt;)</li></ul><p> </p><p>The expected flush delay (such that the tree doesn't have to write to disk on every db write), is ~3 seconds:</p><p><a href=\"https://github.com/OpenXT/manager/blob/master/dbd/dbd.ml#L29\">https://github.com/OpenXT/manager/blob/master/dbd/dbd.ml#L29</a></p><h2>Dom-store and Best Security Practices</h2><h5>What is a \"dom-store\"?</h5><p>A dom-store is an optional per-vm storage location, typically used to provide service VMs with persistent configuration data, outside the scope of the virtual hard disk (which is usually read-only).</p><p> </p><h5>Based on the APIs below, how does a VM access its \"dom-store\"?</h5><p>The same DBUS APIs are used by the VM, and dbd will ensure that any request has its path modified such that its always referring to data within its partition.</p><p>e.g. read(\"foo/bar\") from a VM will be translated to read(\"/dom-store/&lt;vm-uuid&gt;/foo/bar\").</p><p> </p><h5>How does dbd ensure that it looks up the right value for &lt;vm-uuid&gt; based on a dbus call?</h5><p>For each dbus request, dbd needs to lookup the calling domid.  First, it needs to determine the unique connection id, referred as the \"DBus sender ID\" (see <a href=\"http://dbus.freedesktop.org/doc/api/html/group__DBusMessage.html#ga13ce514ceb2d1598751f3a7760cf1375\">http://dbus.freedesktop.org/doc/api/html/group__DBusMessage.html#ga13ce514ceb2d1598751f3a7760cf1375</a>).  Then it uses this information and translate the sender ID to a domain ID, which it does using an OpenXT-specific DBUS function: org.freedesktop.DBus.GetConnectionDOMID(string dbusSenderId).</p><p> </p><p>Once it has the domain ID, it then needs to convert it to the domain's UUID. To do this, dbd does two xenstore reads.</p><p>First it reads the vm's path using the domID: string uuid_path = xenstore-read(\"/local/domain/&lt;domid&gt;/vm\").</p><p>Using this vm path, it then reads the UUID: string uuid = xenstore-read(uuid_path + \"/uuid\")</p><p><br/>Now, dbd knows how to map in the &lt;uuid&gt;, such that any request path is updated to be \"/dom-store/&lt;uuid&gt;/&lt;requested-path&gt;\".</p><p> </p><h5>Can I prevent an untrusted VM from accessing dbd's APIs?</h5><p>If you don't trust the VM to have access these APIs, you may ensure it is disabled by setting \"domstore-read-access\" and \"domstore-write-access\" VM properties to false.  You may also want to double check your rpc-proxy-firewall configuration.</p><h2>Sources</h2><p><a href=\"https://github.com/OpenXT/manager/tree/master/dbd\">https://github.com/OpenXT/manager/tree/master/dbd</a></p><h2>DBUS APIs</h2><h3>Description: DBUS IDL Description</h3><p><a href=\"https://github.com/OpenXT/idl/blob/master/interfaces/db.xml\">https://github.com/OpenXT/idl/blob/master/interfaces/db.xml</a></p><h4>com.citrix.xenclient.db.read(string path)</h4><p>returns: string value</p><p>status: implemented</p><p>notes:</p><ul><li>non-standard stringify for json values:<ul><li>bool =&gt; \"true\" | \"false\"</li><li>double =&gt; string(number)</li><li>object =&gt; \"\"</li><li>array =&gt; \"\"</li><li>null =&gt; \"null\"</li></ul></li><li>key does not exist =&gt; \"\"</li></ul><h4>com.citrix.xenclient.db.read_binary(string path)</h4><p>returns: array of binary strings?</p><p>status: unimplemented/broken</p><p>notes: should be removed entirely (there is no corresponding \"write_binary\" anyways). unused on openxt platform today.</p><h4>com.citrix.xenclient.db.write(string path, string value)</h4><p>returns: none</p><p>status: implemented</p><p>notes: will only take string values (causing all values to be written as string to db)</p><h4>com.citrix.xenclient.db.dump(string path)</h4><p>returns: json string of db at point \"path\"</p><p>status: implemented</p><p>notes: equivalent to \"read\", but will provide actual backend data, not just a string type</p><h4>com.citrix.xenclient.db.inject(string path, string json_value)</h4><p>returns: none</p><p>status: implemented</p><p>notes:</p><ul><li>injects a json string at a point \"path\" in the database.</li><li>if a value already exists at \"path\", it will merge the two values.</li><li>this is most notably used to \"overlay\" the service-uivm and service-ndvm templates in /usr/share/xenmgr-1.0/templates/default, at boot time.</li></ul><h4>com.citrix.xenclient.db.list(string path)</h4><p>returns: array of strings - node names residing under path, if path is an object</p><p>status: implemented</p><p>notes: only works on objects (not arrays, etc.).  will return an empty array</p><h4>com.citrix.xenclient.db.rm(string path)</h4><p>returns: none</p><p>status: implemented</p><p>notes: removes node (any type) located at path</p><h4>com.citrix.xenclient.db.exists(string path)</h4><p>returns: bool : true if key exists (as any type), false otherwise</p><p>status: implemented</p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
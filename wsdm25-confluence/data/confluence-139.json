{
    "id": "confluence-139",
    "title": "DBD(.neXT)",
    "url": "https://openxt.atlassian.net/wiki/spaces/OTF/pages/19431450/DBD(.neXT)",
    "content": "<p>Owned by Chris Patterson\nLast updated: Dec 16, 2015 by Chris Patterson\n\n</p><p><ac:structured-macro ac:macro-id=\"01b45d74-8355-4f74-ba4a-a1a74a4a7bd3\" ac:name=\"toc\" ac:schema-version=\"1\"></ac:structured-macro></p><h1>DBD Replacement</h1><hr/><h2>Summary</h2><hr/><p>Two major chunks of technical debt is the lack of proper ocaml &amp; Haskell cross compilation support in the OE toolchain.  Much of the toolstack is written against old versions and library and require significant work to overhaul to a modern version, even if the cross compiler were implemented properly in bitbake/openembedded.</p><p>Additionally, dbd has a major outstanding bug (<a href=\"https://openxt.atlassian.net/browse/OXT-391),\">https://openxt.atlassian.net/browse/OXT-391),</a> which has yet to be addressed due to lack of maintainers with adequate ocaml experience.</p><p>The scope of this RFC feature page is on replacing dbd and the client tools, db-tools, with compatible replacements.</p><p>A proposed replacement has been written in C++, using support QT libraries (qtbase).</p><h2>Owner</h2><hr/><ul><li>Name: Chris Patterson</li><li>Email:  &lt;pattersonc@ainfosec.com&gt;</li></ul><h2>Current Status</h2><hr/><ul><li>Targeted release: .neXT</li><li>Last updates:</li><li><p>Jira Epic:</p><ac:structured-macro ac:macro-id=\"e4cb7d59-422d-4eeb-84f3-b49671d1eb6a\" ac:name=\"expand\" ac:schema-version=\"1\"><ac:parameter ac:name=\"title\">Epic</ac:parameter><ac:rich-text-body>Will be filled in once feature is approved. Create by replacing this box by inserting JIRA issue. Search for your epic and select it and only it. For display select a table. Then use Epic Name, Key, Status as the display fields.</ac:rich-text-body></ac:structured-macro></li><li><p>Jira Tasks: </p><ac:structured-macro ac:macro-id=\"9a6f8f89-9f43-4a91-ba45-ebda918e6f61\" ac:name=\"expand\" ac:schema-version=\"1\"><ac:parameter ac:name=\"title\">Tasks</ac:parameter><ac:rich-text-body><p>Will be filled in once feature is approved. Create by replacing this box by inserting a JIRA issue/filter. Search for issues belonging to your epic by entering the JQL statement \"Epic Link\" = Key. For example the documentation project JQL is \"Epic Link\" = OXT-138. Then for display select a table, remove the number of rows so all are shown, then use for the fields, Summary, Key, and Status.</p></ac:rich-text-body></ac:structured-macro></li></ul><h2>Detailed Description</h2><hr/><h3>What are the DBD deficiencies that need to be addressed?</h3><p>I have investigated a series of issues which appear to be related to a poorly performing dbd.  Systems under heavy load (such as synchronizing a large number of VMs, loading the UI with many VMs on a system, etc.) tend to become unstable and unresponsive.<br/><br/>Looking into the current dbd implementation, AFAICT, there are a few limitations that are likely to be the cause:</p><ul><li>dbd is single threaded.</li><li>whenever there is a write to any part of the system's db tree, all databases are flushed to disk, as opposed to just the owning/relevant dirty db.</li><li>these writes are synchronous, to ensure db consistency.</li><li>because dbd is single threaded, the dbus servicing is suspended while the database if flushing.</li><li>there tends to be n*2+1 db files that comprise the db tree, where 'n' is the number of vms configured on the system (vm config + vm domstore db).</li></ul><p><br/>This combination is problematic on systems with slower disks, as the db flush may take a significant amount of time if the system is under heavy load and/or has a large number of db files in the tree (causing db read/write accesses to either fail by timing out, or just take a while).</p><h3>How should we fix it?</h3><p>I have prototyped a dbd replacement (QTDBD) in C++/QT which addresses these issues.  Notably  it was designed with two key features in mind:</p><ul><li>multithreaded operation: handle dbus requests and maintain the json tree separately from the thread flushing databases to disk.</li><li>minimize disk writes: only write out db files that are \"dirty\", instead of flushing out all db files on any db write.  The timing dbd currently uses to combine flushes to disk is maintained, but is configurable via command line options (default 3000ms wait period before flushing).</li></ul><p><br/>QTDBD has demonstrated improved system performance under heavy load tests including continuous synchronization on a system with 30+ VMs, with reasonable sized dom-stores.</p><h3>Performance testing data</h3><p>If you'd like to see this performance hit, build openxt with dbd-perftest included.  Run dbd-perftest, create vms to compare against, and run again:<br/><br/></p><pre># write to db every 1000ms while reading quickly, up to 50k iterations</pre><pre>dbd-perftest -w 1000 -r 0.00001 -i 50000</pre><pre> </pre><pre># create 40 vms and populate all domstores with a single key/value</pre><pre>for x in $(seq 1 40); do xec create-vm-with-template new-vm-sync; done</pre><pre>for x in $(xec list-vms); do xec-vm -o $x set-domstore-key foo bar; done</pre><pre> </pre><pre># retest</pre><pre>dbd-perftest -w 1000 -r 0.00001 -i 50000</pre><p> </p><p>With qtdbd, the results should remain consistent between the two numbers.  However, if you run the old dbd (copy from another openxt build - killall dbd and then run /tmp/dbd.old), you will see dramatic slowdown, particularly on systems w/o SSDs.<br/><br/>Sample results for two systems (one with SSD and another with typical HDD):<br/><br/><strong>[Current DBD - HDD System]</strong><br/>2 VMs: 2532 reads/sec<br/>42 VMs: &lt;1 read/sec<br/><br/><strong>[Current DBD - SSD System]</strong><br/>2 VMs: 3216 reads/sec<br/>42 VMs: 2286 reads/sec<br/><br/><strong>[QTDBD - HDD System]</strong><br/>2 VMs: 2593 reads/sec<br/>42 VMs: 2504 reads/sec<br/><br/><strong>[QTDBD - SSD System]</strong><br/>2 VMs: 3384 reads/sec<br/>42 VMs: 3336 reads/sec</p><p> </p><p>OpenXT destabilizes when db writes happen if you have a larger number of VMs.  If you have a system (without SSD) handy, feel free to try it for yourself:</p><pre>time db-read foo</pre><pre>for x in $(seq 1 40); do xec create-vm-with-template new-vm-sync; done<br/>for x in $(xec list-vms); do xec-vm -o $x set-domstore-key foo bar; done</pre><pre>db-write foo bar<br/>time db-read foo<br/> </pre><h3>What is the db update/flush timer?</h3><p>Currently, dbd defines its update interval at 3 seconds. (see <a href=\"https://github.com/OpenXT/manager/blob/master/dbd/dbd.ml#L29\" rel=\"nofollow\">https://github.com/OpenXT/manager/blob/master/dbd/dbd.ml#L29</a>)  QTDBD gives you the option to configure whatever you want in /etc/init.d/dbd, via a command line option.</p><h2>Benefit to OpenXT</h2><hr/><h3>Reducing technical debt</h3><p>Continues paying off technical debt, replacing an ocaml daemon with something that properly cross compiles and has up-to-date dependencies.</p><h3>Performance</h3><p>Fixes performance issues with current dbd. (See detailed description above).</p><h2>Scope</h2><hr/><p>This implementation completely replaces the existing dbd and the db-tools with compatible replacements.  It does not include replacement of upgrade-db.</p><h3>What changes are required, and where?</h3><h4><br/>openxt.git changes</h4><p>URL<strong>: </strong><a href=\"https://github.com/cjp256/openxt/tree/openxt-qt5\" rel=\"nofollow\">https://github.com/cjp256/openxt/tree/openxt-qt5</a><br/>Summary of changes:</p><ul><li>add meta-qt5 layer to bblayers</li><li>backport an openembedded-core fix to enable meta-qt5 to build OK (this can be removed after moving to a recent OE version such as jethro)</li></ul><h4>meta-qt5.git changes</h4><p>URL: <a href=\"https://github.com/cjp256/meta-qt5/tree/master\" rel=\"nofollow\">https://github.com/cjp256/meta-qt5/tree/master</a><br/>Summary of changes:</p><ul><li>adds meta-qt5 layer from upstream</li><li>add two commits with fixes required to build on OpenXT's current OE version (this local repo could be dropped after moving to newer OE, and instead point to upstream)</li></ul><h4>qtdbd.git (new)</h4><p>URL: <a href=\"https://github.com/cjp256/qtdbd/tree/master\" rel=\"nofollow\">https://github.com/cjp256/qtdbd/tree/master</a><br/>Summary:</p><ul><li>provides compatible equivalent to dbd (no additional APIs were added)</li><li>provides db-tools with compatible equivalents:<ul><li>db-cat (which is actually a dud)</li><li>db-exists</li><li>db-ls</li><li>db-nodes</li><li>db-read</li><li>db-rm</li><li>db-write</li></ul></li><li>provides a couple new command line utilities to expose existing APIs:<ul><li>db-dump</li><li>db-inject</li></ul></li><li>uses upstream qt5 (qtbase) and qmjson libraries</li><li>does not replace upgrade-db (existing one is retained as-is)</li><li>adds a test utility to perform automatic regression tests</li><li>(optional) integrated with travis CI to perform automatic build &amp; regression tests on opened pull requests and pushes.</li></ul><h4>xenclient-oe.git changes</h4><p>URL: <a href=\"https://github.com/cjp256/xenclient-oe/tree/qtdbd\" rel=\"nofollow\">https://github.com/cjp256/xenclient-oe/tree/qtdbd</a><br/>Summary of changes:</p><ul><li>replace dom0's dbd with qtdbd's equivalent</li><li>replace dom0, syncvm, and ndvm db-tools with those provided by qtdbd</li><li>add dump() to rpc proxy firewall rules for ndvm, because it uses db-ls. qtdbd's provided db-ls uses dump() instead of the old style for efficiency purposes.  Note that this does not grant any additional access for the ndvm.</li><li>add recipe for qmjson</li><li>add configuration bbappend for qtbase</li><li>shift v4v wrappers to qtdbd recipe</li></ul><h2>How To Test</h2><hr/><h3>Functional/unit tests:</h3><p>QTDBD ships with a functional testing binary, which it runs through a number of tests to exercise the database.  There is no such unit test / application for the current dbd that could be ported over.</p><p>To run these locally, clone the qtdbd repo:</p><pre>qmake &amp;&amp; make -j &amp;&amp;  ./tests/qtdbd-unittests/qtdbd-unittests -maxwarnings 0</pre><h3>Performance:</h3><p>If you'd like to test performance, build openxt with dbd-perftest included (also from qtdbd).  Run dbd-perftest inside dom0, then create vms to compare against, and run again:<br/><br/></p><pre># write to db every 1000ms while reading quickly, up to 50k iterations<br/>dbd-perftest -w 1000 -r 0.00001 -i 50000<br/><br/># create 40 vms and populate all domstores with a single key/value<br/>for x in $(seq 1 40); do xec create-vm-with-template new-vm-sync; done<br/>for x in $(xec list-vms); do xec-vm -o $x set-domstore-key foo bar; done<br/><br/># retest<br/>dbd-perftest -w 1000 -r 0.00001 -i 50000</pre><p><br/>With qtdbd, the results should remain consistent between the two numbers.  However, if you run the old dbd (copy from another openxt build - killall dbd and then run /tmp/dbd.old), you will see dramatic slowdown, particularly on systems w/o SSDs.</p><h2>User Experience</h2><hr/><p>User should experience significantly improved performance when configured with a large number of VMs (particularly the non-SSD case).</p><h2>Dependencies</h2><hr/><p>Requires a new openembeded layer to be added: meta-QT5</p><p>Library dependencies: qtbase, qmjson</p><h2>Documentation</h2><hr/><p>I have documented the current DBD in another confluence page:</p><p><a href=\"https://openxt.atlassian.net/wiki/pages/viewpage.action?pageId=19431428\">https://openxt.atlassian.net/wiki/pages/viewpage.action?pageId=19431428</a></p><p>The proposed replacement is very similar in behavior to the original DBD (with the exception of the performance characteristics described above).  The APIs should be consistent.</p><p> </p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "OTF"
}
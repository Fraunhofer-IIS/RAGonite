{
    "id": "confluence-154",
    "title": "vUSB Daemon",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/14844020/vUSB+Daemon",
    "content": "<p>Owned by Ross Philipson\nLast updated: Jul 01, 2016 by Jed\n\n</p><ac:structured-macro ac:macro-id=\"2fe0d113-c302-4dd9-b6cc-fd05319342b4\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><p><ac:image ac:width=\"80\"><ri:attachment ri:filename=\"cc-by.png\"><ri:page ri:content-title=\"Documentation Guidelines\" ri:space-key=\"OD\"></ri:page></ri:attachment></ac:image></p><p>Copyright 2015 by Assured Information Security, Inc. Created by Jean-Edouard Lejosne &lt;lejosnej@ainfosec.com&gt;. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"http://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\">http://creativecommons.org/licenses/by/4.0/</a>.</p></ac:rich-text-body></ac:structured-macro><p><ac:structured-macro ac:macro-id=\"710d366b-d718-4c66-8d83-65844e9c3f18\" ac:name=\"toc\" ac:schema-version=\"1\"></ac:structured-macro></p><h1>Description</h1><p>vusb-daemon handles USB device passthrough.<br/>It listens to dbus and udev for user, toolstack and device events.<br/>Then, according to the database-stored policy, it uses the vusb dom0 kernel module to trigger USB passthrough action.</p><h1>Udev</h1><h2>Client</h2><p>vusb-daemon runs a udev monitor to get notified of device activity.<br/>It also uses udev to get more information about new devices.</p><h1>DBus</h1><h2>Client</h2><p>vusb-daemon talks to:</p><ul><li>xenmgr to get platform and VM information</li><li>input server to know what VM currently has focus</li><li>dbd to read/write the policy</li></ul><h2>Server</h2><p>vusb-daemon exposes device information and methods on dbus, to interact with the UI and the toolstack.<br/>It is possible to test it using <code>xec -s com.citrix.xenclient.usbdaemon</code>. NOTE: This call is blocked by SELinux policy, to call this run <code>setenforce 0</code> to enter SELinux permissive mode.</p><h1>Policy</h1><h2>Storage</h2><p>The policy is stored in the main database, under <code>/usb-rules</code>.<br/>It can be dumped using <code>db-ls /usb-rules</code>.<br/>vusb-daemon uses db.c to access it. db.c has been written in such a way that it should be re-usable by other projects, like a command line policy manager.</p><h2>Format</h2><p>Each rule is written under /usb-rules/. Low number == high priority.<br/>Rules are made of:</p><ul><li>a \"description\":<br/>Free text to describe the rule</li><li>a \"command\"<br/><ul><li>\"always\": always assign the device (or all if unspecified) to the vm (or none if unspecified), implies \"allow\" for that vm. Prevents re-assignment to any other VM.</li><li>\"default\": same as \"always\", without preventing re-assignment.</li><li>\"allow\": allow the device (or all if unspecified) to be passed to the vm (or all if unspecified)</li><li>\"deny\": deny the device (or all if unspecified) to be passed to the vm (or all if unspecified)</li></ul></li><li>a \"device\"<br/>See below for sub-nodes</li><li>a \"vm\"<br/>For now, the only valid sub-node is \"uuid\", to specify the UUID of the VM</li></ul><hr/><p>A <strong>device</strong> is a list of sub-nodes, chosen from:</p><p><strong>Shortcuts</strong></p><ul><li>\"keyboard\" = \"1\"/\"0\" (the device has to be / not be a keyboard)</li><li>\"mouse\" = \"1\"/\"0\" (for mice and trackpads)</li><li>\"game_controller\" = \"1\"/\"0\"</li><li>\"mass_storage\" = \"1\"/\"0\" (includes optical drives)</li><li>\"optical\" = \"1\"/\"0\" (cd / dvd / blu ray drive)</li><li>\"vendor_id\" (Vendor ID, as parseable to a '<a href=\"http://linux.die.net/man/3/strtol\">strtol</a>')</li><li>\"device_id\" (Device ID, as parseable to a '<a href=\"http://linux.die.net/man/3/strtol\">strtol</a>')</li></ul><p><strong>sysfs Nodes</strong></p><ul><li>\"sysattr\" (Parent node for the set of key-value pairs to match against /sys attribute nodes)</li></ul><p>Example: To deny all USB 3.0 devices:</p><ac:structured-macro ac:macro-id=\"401e87fe-8480-4f4d-bb63-1de85c7a6145\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">text</ac:parameter><ac:plain-text-body><![CDATA[ \"usb-rules\": {\n  \"1001\": {\n    \"description\": \"Deny USB 3.0 to all VMs\",\n    \"command\": \"deny\",\n    \"device\": {\n      \"sysattr\": {\n        \"version\" = \"3.00\"\n      }\n    }\n  }\n  ...\n}]]></ac:plain-text-body></ac:structured-macro><p><strong>udev Properties</strong></p><ul><li>\"property\" (Parent node for the set of key-value pairs to match against udev properties)</li></ul><p>Example: To allow all Toshiba devices by manufacturer name (as opposed to vendor ID):</p><ac:structured-macro ac:macro-id=\"cd1f72f9-727e-4bfb-8299-e2cbe03ed7b5\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">text</ac:parameter><ac:plain-text-body><![CDATA[\"usb-rules\": {\n  \"1001\": {\n    \"description\": \"Allow Toshiba to all VMs\",\n    \"command\": \"deny\",\n    \"device\": {\n      \"property\": {\n        \"ID_VENDOR\" = \"Toshiba\"\n      }\n    }\n  }\n  ...\n} ]]></ac:plain-text-body></ac:structured-macro><h2>Behavior</h2><ul><li>Rules are parsed in (\"priority\") order, from low to high</li><li>First match \"wins\", the rest of the policy is ignored, default to deny if no rule matches the device</li><li>The order is critical</li><li>Multiple attributes inside a device/vm block must all match (they are AND-ed together).</li></ul><h2>Default policy</h2><p>Note the actual default internal policy is \"deny\" everything. This is the external default policy in json, taken from <code>/config/db</code>:</p><ac:structured-macro ac:macro-id=\"39bfe061-76b2-4f83-9323-ac6a377c278b\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">text</ac:parameter><ac:plain-text-body><![CDATA[\"usb-rules\": {\n  \"9900\": {\n    \"description\": \"Deny keyboard passthrough to all VMs\",\n    \"command\": \"deny\",\n    \"device\": {\n      \"keyboard\": \"1\"\n    }\n  },\n  \"9999\": {\n    \"description\": \"Allow everything else\",\n    \"command\": \"allow\"\n  }\n} ]]></ac:plain-text-body></ac:structured-macro><p>Rule 9900 blocks keyboard passthrough and rule 9999 allows everything, effectively switching the default behavior from \"deny\" to \"allow\".</p><h2>Other policy bits</h2><p>Some legacy flags are still supported by the vusb-daemon, even it they should probably be moved to the policy in the database.</p><ul><li>Those VM flags are handled:<br/><ul><li>If the VM flag \"usb-enabled\" is set to false, no device will be plugged to the VM.</li><li>If \"usb-auto-passthrough\" is set to false, devices won't be auto-assigned to the VM when it's focused.</li></ul></li><li>This VM flags don't have any effect anymore:<ul><li>\"usb-grab-devices\", which can be expressed by an \"always\" policy rule with no device and the desired VM</li></ul></li></ul><p>The previous vusb-daemon used to check if VMs had tools installed before allowing plugging devices to them. That requirement doesn't make much sense so it got removed. Now one can install only the USB drivers in a VM and still get USB passthrough.<br/>If this ends up begin a requirement, something like a \"tools-installed\" VM property could be added to the policy.</p><h2>Modification</h2><h3>Automatic</h3><p>When a device is set to be \"Always assigned\" to a VM, vusb-daemon creates an \"always\" rule, and puts it at the beginning of the policy, using the highest available priority number below 1001. This means that those rules will have a high priority, which is assumed is what the user wants...<br/>For that reason, manually added rules should have a priority higher than 1000.</p><h3>Manual</h3><p>Rules can be manually added using <code>db-write</code> (recommended) or by editing <code>/config/db</code>(in that case, don't forget to run <code>killall -HUP dbd</code> after).<br/>As mentioned above, using priority numbers above 1000 is highly recommended.</p><pre><code><br/></code></pre>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
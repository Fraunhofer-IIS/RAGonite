{
    "id": "confluence-179",
    "title": "XENMOU Specification",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/15892482/XENMOU+Specification",
    "content": "<p>Owned by Ross Philipson\nLast updated: Oct 14, 2015 by Ross Philipson\n\n</p><p>XenMou is a PCI device which may be present at any BDF in the system.</p><pre>The Xen PCI Vendor ID 5853 and Device ID C110 will be assigned for this\ndevice.  It will be an Input Device Class, Mouse Subclass (0x0902).\n\nIt contains 1 BAR:\n\nBAR0 is non prefetchable memory of 8k+ bytes (2+ pages) \n\tcontaingin MMIO registers and mouse event data.\n\nThe device can also generate an interrupt.\n\nRegisters:\n\nGlobal Registers (Range 0x00000 - 0x00FFF)\n\nThe global registers control features of the xenmou adapter that\nreflect the entire device.\n\n0x00000 - XMOU_MAGIC:\n  Magic number. This register always reads 0x584D4F55\n  \n  Type: Read-Only\n\n0x00004 - XMOU_REV:\n  Revision number. This register reads 0x1 for this revision.\n  \n  Type: Read-Only\n\n0x00100 - XMOU_CONTROL:\n  Control register to change backend settings.\n  \n  Bit 0:  XMOU_EN Set to enable the xenmou device.\n  Bit 1:  INT_EN  Global bit to enable interrupts from the device.\n  Bits 2 - 31: Unused.\n  \n  Type: Read-Write\n  \n0x00104 - XMOU_EVENT_SIZE:\n  Size in bytes of the individual event data structures in the event register\n  range.\n  \n  Type: Read-Only\n  \n0x00108 - XMOU_EVENT_NPAGES:\n  Number of pages that make up the the event register range.\n  \n  Type: Read-Only\n  \n0x0010C - XMOU_ACCELERATION:\n  Acceleration scalar factor ranging from 1 to 20. The value for the default\n  mouse speed is 10.\n  \n  Type: Write-Only\n  \n0x000110 - XMOU_ISR:\n  Interrupt status register. Write to dismiss interrupt.\n  \n  Bit 0:   INT  Indicates if this device is currently generating an interrupt.\n  Bits 1 - 31: Unused.\n  \n  Type: Read-Only\n\n\nEvent Registers (Range 0x01000 - 0x0nFFF)\n\nThe event registers occupy XMOU_EVENT_NPAGES pages of 4096 bytes.  There are\n(PAGE_SIZE/XMOU_EVENT_SIZE - 1) individual event data structures per page. \nThe individual event data structures are each XMOU_EVENT_SIZE bits in size\n(XMOU_EVENT_SIZE is always 64 or greater bits).  The first event data\nstructure on the first page is unique in that it holds the read and write\npointer indexing into the other event data structures.\n\n0x01000 - XMOU_READ_PTR:\n  Current read offset index to the next event data structures to read (in \n  XMOU_EVENT_SIZE units).\n  \n  Type: Read-Write\n  \n0x01004 - XMOU_WRITE_PTR:\n  Current write offset index to the event data structures one beyond the last\n  one written to (in XMOU_EVENT_SIZE units).\n  \n  Type: Read-Only\n  \nThe event registers data structures starting at (0x01000 + XMOU_EVENT_SIZE)\nform a logical ring spanning XMOU_EVENT_NPAGES pages.  The offset pointers\nabove are indices into the ring.  If the write pointer is less than the read\npointer then the ring has wrapped.  When the read pointer is not equal to the\nwrite pointer, there are events to read.  The pointers being equal always\nmeans there are no events to read, that is read == write never means that\nthe ring is full with (PAGE_SIZE/XMOU_EVENT_SIZE - 1) events.  A full ring\nwill have a maximum of (PAGE_SIZE/XMOU_EVENT_SIZE - 2) events in it.  The \nring may wrap at this point, controlled by the underlying virtual HW.  When\nevents have been consumed, the xenmou driver software moves the read pointer\nforward up to the write pointer.  Driver software never moves the write\npointer.\n\nEach of the event registers is formatted in the following manner, starting\nwith the first event register:\n\n0x01000 + (XMOU_EVENT_SIZE) - XMOU_FLAG_REV_FIELD:\n  This 32 bit field contains 16 bits of flags indicating what type of mouse\n  event is being reported. The second 16 bits report the revision ID of the\n  individual structure that is always &lt;= XMOU_REV.\n  \n  The FENCE flag will be set to indicate a fence event that conveys no data\n  but indicates all events following the last event occured contemperaneously.\n  This holds to for single events as well as groups of events.\n  \n  Bit 0:  ABSOLUTE Absolute mouse movement event.\n  Bit 1:  RELATIVE Relative mouse movement event.\n  Bit 2:  FENCE Fence event.\n  Bit 3:  LEFT_BUTTON_DOWN\n  Bit 4:  LEFT_BUTTON_UP\n  Bit 5:  RIGHT_BUTTON_DOWN\n  Bit 6:  RIGHT_BUTTON_UP\n  Bit 7:  MIDDLE_BUTTON_DOWN\n  Bit 8:  MIDDLE_BUTTON_UP\n  Bit 9:  HWHEEL Horizontal wheel movement event.\n  Bit 10:  VWHEEL Vertical wheel movement event.\n  Bits 11 - 15: Unused.\n  Bits 16 - 31: Unsigned short values specifying the revision number.\n  \n0x01000 + (XMOU_EVENT_SIZE + 4) - XMOU_DATA_FIELD:\n  This 32 bit field contains data associated with a given mouse event.\n  \n  For ABSOLUTE the field contains two 16b values:\n    Bits 0 - 15:  X absolute co-ordinate between 0 and 65535\n    Bits 16 - 31: Y absolute co-ordinate between 0 and 65535\n    \n  For RELATIVE the field contains two 16b values:\n    Bits 0 - 15:  X relative motion between -32768 and +32767\n    Bits 16 - 31: Y relative motion between -32768 and +32767\n    \n  For HWHEEL and VWHEEL the field is a single 32b field with wheel data.\n  \n  Type: Read-Only</pre><p> </p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
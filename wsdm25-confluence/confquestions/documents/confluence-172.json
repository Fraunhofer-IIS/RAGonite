{
    "id": "confluence-172",
    "title": "OTA Upgrades",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/52985867/OTA+Upgrades",
    "content": "<p>Owned by Ross Philipson\nLast updated: Aug 22, 2016 by Ross Philipson\n\n</p><ac:structured-macro ac:macro-id=\"8b686237-640b-4a99-aad7-c28571c6b798\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><p><ac:image ac:width=\"80\"><ri:attachment ri:filename=\"cc-by.png\"></ri:attachment></ac:image></p><p>Copyright 2012 by Citrix Systems, Inc. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"http://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\">http://creativecommons.org/licenses/by/4.0/</a>.</p></ac:rich-text-body></ac:structured-macro><p><span class=\"mw-headline\"><ac:structured-macro ac:macro-id=\"85dd3af4-ca17-4406-ae05-ab349662118f\" ac:name=\"toc\" ac:schema-version=\"1\"></ac:structured-macro><br/></span></p><h1><span class=\"mw-headline\">Background</span></h1><p>These are resurrected notes on the design of the Over The Air upgrade mechanism that was introduced in XenClient and continues to be used in OpenXT.</p><p>The XenClient software installed on a machine has the following constituent components:</p><ul style=\"margin-left: 1.6em;\"><li>A standard partition table</li><li>A Master Boot Record, either installed by XenClient or by the hardware system vendor</li><li>A single active primary partition that is a LVM container</li><li>The GRUB2 bootloader installed on the primary partition</li><li>The following LVM logical volumes within the LVM container<ul style=\"margin-left: 1.6em;\"><li>boot (12MB)</li><li>config (12MB)</li><li>cores (64MB)</li><li>log (64MB)</li><li>root (250MB)</li><li>storage (large) - this volume contains the VM disk images</li><li>swap (256MB) - though this may be deprecated in favour of a swap file on the /storage volume</li></ul></li><li>A tools ISO file that is on the storage volume in /storage/isos</li><li>The IOVM data on the storage volume:<ul style=\"margin-left: 1.6em;\"><li>A VHD file containing the IOVM filesystem</li><li>The IOVM swap file</li><li>The IOVM linux kernel</li></ul></li></ul><p>The Enhanced Isolation Pack includes the Network Driver VM (NDVM) with filesystem, swap file, and kernel in the storage volume.</p><h1><span class=\"mw-headline\">Requirements</span></h1><p>The requirements have been divided into four phases:</p><ul style=\"margin-left: 1.6em;\"><li>Phase 1: Download upgrade from web server and apply via dom0 command line.</li><li>Phase 2: Download upgrade from web server and apply via Client UI.</li><li>Phase 3: Download hotfix from web server and apply via Client UI.</li><li>Phase 4: Download and apply upgrades and hotfixes via Synchroniser.</li></ul><h2><span class=\"mw-headline\">Terminology</span></h2><ul style=\"margin-left: 1.6em;\"><li>An <strong>upgrade</strong> is a transformation from one installed software release version to another.</li><li>A <strong>hotfix</strong> is a smaller controlled change to an installed system that does not advance it to another release version. The concept of a hotfix as a distinct abstraction is introduced in phase 3.</li><li>An <strong>update</strong> is either an <em>upgrade</em> or a <em>hotfix</em>.</li></ul><p>The marketing words used may differ from the technical definitions adhered to in this document. For example, if we had only reached a stage where requirements in phases 1 and 2 were met, marketing material may refer to an upgrade release v1.0.1 as a hotfix for the purpose of clarifying to customers that the scope of changes is minimal, but the underlying mechanism would still behave in the same way as for any other upgrade and a full image replacement would occur.</p><h2><span class=\"mw-headline\">Phase 1</span></h2><h3><span class=\"mw-headline\">General</span></h3><ul style=\"margin-left: 1.6em;\"><li>It must be possible to apply an update to make a permanent, controlled change to any component of the installed software on a XenClient machine.<ul style=\"margin-left: 1.6em;\"><li>In-guest software (i.e. XenClient tools) is to be updated by providing an updated set of tools; there is no requirement to directly patch installed in-guest software.</li></ul></li><li>The update mechanism must be capable of performing a upgrade between XenClient releases.<ul style=\"margin-left: 1.6em;\"><li>For each release, there must be a defined set of releases from which upgrade is allowed.</li><li>[<em>PB: For now the requirement is to allow moving from the last release forward. So Lois to Dylan, Dylan to Brian.</em>]</li></ul></li><li>The update mechanism must preserve installed VMs and host configuration settings, such as wireless network settings, device admin password etc.</li><li>For phase 1, the update mechanism must retrieve the update data from a https secure web server.</li><li>For phase 1, it is acceptable to require the use of the dom0 CLI to apply an update, specifying the URL of the update data.</li><li>The status report tool must accurately report which release is installed.</li></ul><h3><span class=\"mw-headline\">Mechanism</span></h3><ul style=\"margin-left: 1.6em;\"><li>Updates must be applied in a transactional manner: either all of the update is applied or none of it is.</li><li>Metadata from each update must be recorded on the client, such that any subsequent status report will identify that the update has been applied.</li><li>The update mechanism must not require an active network connection once the update package has been downloaded.</li><li>Errors during application of the update must be reported.</li><li>The update mechanism must be compatible with XenClient's use of TXT without triggering a tampering-detected event.<ul style=\"margin-left: 1.6em;\"><li>Two clients at the same release must have the same filesystem checksums, regardless of which release was originally installed on each client, which upgrades were applied and which update mechanisms were used.</li></ul></li></ul><h3><span class=\"mw-headline\">Packaging</span></h3><ul style=\"margin-left: 1.6em;\"><li>An update must be distributable as a single file with a declared three-letter filetype suffix.</li><li>It must be possible to securely verify whether an update originates from a proper source or not.</li></ul><h2><span class=\"mw-headline\">Phase 2</span></h2><h3><span class=\"mw-headline\">General</span></h3><ul style=\"margin-left: 1.6em;\"><li>For phase 2, it must be possible to apply an update using the Client UI by entering the URL of the update data.<ul style=\"margin-left: 1.6em;\"><li>[<em>PB: This was a nice to have, so either allow upgrade via Client UI or just continue to support the CD based upgrade.</em>]</li><li>For phase 2, it is not acceptable to require the use of the dom0 CLI to apply an update.</li></ul></li><li>Update from the Client UI must be possible regardless of whether the Client is registered to a Synchroniser.</li><li>The Client UI must indicate which release is installed.</li><li>The Client UI must report the download progress of the update data during transfer.</li><li>The Client UI must prompt the user to reboot the host once application of the update has completed.</li></ul><h2><span class=\"mw-headline\">Modifications to support smaller packages (\"surgical\" updates)</span></h2><h3><span class=\"mw-headline\">General</span></h3><ul style=\"margin-left: 1.6em;\"><li>The update mechanism must be capable of applying a hotfix.<ul style=\"margin-left: 1.6em;\"><li>A hotfix is a targetted fix for a specific issue in a specific XenClient release.</li><li>Application of a hotfix must only be allowed if the client is at the correct release.</li><li>Application of a hotfix must not be prevented by the prior application of another hotfix.</li><li>Application of a hotfix must not undo the application of another hotfix.</li></ul></li><li>The client UI must indicate which hotfixes have been applied.</li><li>The status report tool must accurately report which hotfixes have been applied.</li></ul><h3><span class=\"mw-headline\">Packaging</span></h3><ul style=\"margin-left: 1.6em;\"><li>The size of a hotfix must be proportional to the size of the change it carries.</li></ul><h3><span class=\"mw-headline\">Mechanism</span></h3><ul style=\"margin-left: 1.6em;\"><li>The update mechanism must be compatible with XenClient's use of TXT without triggering a tampering-detected event.<ul style=\"margin-left: 1.6em;\"><li>Two clients at the same release and with the same set of hotfixes applied must have the same filesystem checksums, regardless of which release was originally installed on each client, which upgrades were applied, which order the hotfixes were applied and which update mechanisms were used.</li></ul></li></ul><h2><span class=\"mw-headline\">Modifications to support update control via Synchronizer</span></h2><h3><span class=\"mw-headline\">General</span></h3><ul style=\"margin-left: 1.6em;\"><li>It must be possible to apply an update via the Synchroniser to registered clients.<ul style=\"margin-left: 1.6em;\"><li>The Synchroniser must be able to function with clients with differing releases and different sets of hotfixes applied.<ul style=\"margin-left: 1.6em;\"><li>[<em>Restrict combinations of Synchroniser and client release?</em>]<ul style=\"margin-left: 1.6em;\"><li>[<em>PB: The requirement I put in was starting with Brian we need to go one back. So Brian needs to support Dylan clients but not Lois clients. In the future we will likely need to do more but for now one back is fine.</em>]</li></ul></li></ul></li><li>The Synchroniser must be aware of which release is installed on each client and which hotfixes have been applied.</li><li>It must be possible to upload client upgrades and hotfixes to the Synchroniser.<ul style=\"margin-left: 1.6em;\"><li>[<em>PB: Would be good to define this a bit more. If we can do it I’d like to have the admin be able to use the Sync web UI and browse for a local file on their system to upload. Hit the upload button and get some basic progress and a message that the hotfix, upgrade is valid and who it comes from.</em>]</li></ul></li><li>It must be possible through the Synchroniser UI to target upgrades and hotfixes to specific clients.<ul style=\"margin-left: 1.6em;\"><li>The Synchroniser must be aware of which upgrades and hotfixes can be applied to each client.</li><li>[<em>Ways to select clients?</em>]<ul style=\"margin-left: 1.6em;\"><li>[<em>PB: I spoke with you guys last time about doing device based selection but allowing the admin to derive a list of devices by entering a username or group name from a local user db or from AD.</em>]</li></ul></li><li>[<em>Automatically applying upgrades/hotfixes to new clients?</em>]<ul style=\"margin-left: 1.6em;\"><li>[<em>PB: After the current environment gets upgraded then the admin will want to flip a switch and have it automatically upgrade any new clients added to the environment that are on an older version of the software.</em>]</li><li>[<em>PB: The Synchronizer will need the ability to report on the version of XenClient software that is running on each endpoint and provide a mechanism to target the over the air upgrades to a subset or the total population of XenClient endpoints. The administrator should have the ability to phase the upgrades of endpoints over a period of time and target specific systems, users, or groups of users for upgrades. The user and group targeting should include both local and Active Directory linked objects. The system should also have a mechanism to report on upgrade failures.</em>]</li></ul></li></ul></li><li>The Synchroniser must be aware when a client update fails.<ul style=\"margin-left: 1.6em;\"><li>[<em>PB: Needs to allow an admin to run a report and see which systems failed.</em>]</li><li>[<em>PB: In some future release we would want to send e-mail alerts, etc, But running a report is fine for now.</em>]</li></ul></li><li>The update mechanism must obtain the consent of the user on the client before the update proceeds.</li><li>The update mechanism must not require the device admin password to be entered on the client.</li><li>[<em>PB: The update mechanism should allow the user to postpone an update for some reasonable period of time. We should map to the Windows update process. I think the options are 10 minutes, 30 minutes, 1 hour, 4 hours.</em>]</li></ul></li></ul><h2><span class=\"mw-headline\">Later work</span></h2><h3><span class=\"mw-headline\">General</span></h3><ul style=\"margin-left: 1.6em;\"><li>In the future we may need to expand the upgrade path so that you could go from a major release (XC 1.0 - Lois) or a minor release such as a service pack (XC 1.0.1 - Dylan) to the next major Brian (XC 2.0).<ul style=\"margin-left: 1.6em;\"><li>[<em>PB: So in the example above for now they would need to be on the latest 1.0.x release to move up to the 1.1 but in the future we may ask for more options.</em>]</li></ul></li></ul><h3><span class=\"mw-headline\">Packaging</span></h3><ul style=\"margin-left: 1.6em;\"><li>Allow secure verification of updates from other sources, e.g. OEMs, partners</li></ul><h2><span class=\"mw-headline\">Future considerations</span></h2><ul style=\"margin-left: 1.6em;\"><li>Compatibility between hotfixes and OEM customisations.</li><li>OEM customisations applied via hotfix mechanism?</li><li>Interactions with supplemental packs.</li><li>How to update tools installed in VMs?<ul style=\"margin-left: 1.6em;\"><li>[<em>PB: For the first go around we could do alerts within the guest. But we have to figure out how to run the installer with elevated privileges as the regular Windows user might not have that level of access on a locked down business VM.</em>]</li></ul></li><li>Use same mechanism for Kent/non-Kent variants? Difficult since creates a VM and hotfixes don't survive upgrades.</li><li>Applying upgrades and hotfixes to Synchroniser?</li><li>[<em>Hotfix with prerequisite hotfixes?</em>]<ul style=\"margin-left: 1.6em;\"><li>[<em>PB: This is really up to you guys, I don’t have a problem with a hotfix requirement for another hotfix but it may get messy for our admins. It might be better to bundle any prereqs into the hotfix.</em>]</li></ul></li><li>[<em>Hotfix superseding another hotfix?</em>]<ul style=\"margin-left: 1.6em;\"><li>[<em>PB: This is really up to you. I think eventually we need this but in the early days we can likely just document that a certain hotfix supersedes another.</em>]</li></ul></li><li>[<em>Hotfix being incompatible with another hotfix?</em>]<ul style=\"margin-left: 1.6em;\"><li>[<em>PB: Could but I think it’s an edge case, I would design for adding this in the future.</em>]</li></ul></li></ul><h3><span class=\"mw-headline\">Updating via host installer</span></h3><p>[<em>Need to decide if this is necessary. Main motivation is to recover from problems where client won't boot.</em>]</p><ul style=\"margin-left: 1.6em;\"><li>It must be possible to apply an update from the host installer, either from optical media or via the network.<ul style=\"margin-left: 1.6em;\"><li>The host installer must require the device admin password to be entered on the client.</li></ul></li></ul>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
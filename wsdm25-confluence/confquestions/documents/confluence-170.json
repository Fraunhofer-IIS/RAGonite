{
    "id": "confluence-170",
    "title": "Build Steps",
    "url": "https://openxt.atlassian.net/wiki/spaces/BS/pages/14844050/Build+Steps",
    "content": "<p>Owned by Ross Philipson\nLast updated: Sep 25, 2015 by Ross Philipson\n\n</p><p>The main build script in the <a href=\"https://github.com/OpenXT/openxt\">OpenXT</a> repo is <a href=\"https://github.com/OpenXT/openxt/blob/master/do_build.sh\">do_build.sh</a>. This script is written to execute a series of build STEPS that in the end result in an ISO file that is the OpenXT installer. By default <code>do_build.sh</code> will execute a default set of STEPS that are defined within the script.</p><p>If you want to override this variable you can do so by redefining it on the <code>.config</code> file at the root of your build script directory. You can also execute a single or series of build steps using<code>do_build.sh</code> directly on the command line:</p><pre><code>do_build.sh -s step1,step2,step3\n</code></pre><p>The rest of this page documents the steps that <code>do_build.sh</code> can execute.</p><h2>Required Steps</h2><table><tbody><tr><th>Step</th><th colspan=\"1\">Description</th></tr><tr><td colspan=\"1\"><span>setupoe</span></td><td colspan=\"1\"><span>Clones all of the git repos needed to build OpenXT and processes .config to make OE's local.conf.</span></td></tr><tr><td colspan=\"1\"><span>initramfs</span></td><td colspan=\"1\"><span>The initial ram file system of OpenXT. This contains all the device drivers necessary to mount the actual file system.</span></td></tr><tr><td colspan=\"1\"><span>stubinitramfs</span></td><td colspan=\"1\"><span>The initramfs of the stub domains in which VMs run.</span></td></tr><tr><td colspan=\"1\"><span>dom0</span></td><td colspan=\"1\"><span>OpenXT control domain.</span></td></tr><tr><td colspan=\"1\"><span>uivm</span></td><td colspan=\"1\"><span>OpenXT service VM that runs the user interface.</span></td></tr><tr><td colspan=\"1\"><span>ndvm</span></td><td colspan=\"1\"><span>OpenXT service VM that runs the networking domain.</span></td></tr><tr><td colspan=\"1\"><span>syncvm</span></td><td colspan=\"1\"><span>OpenXT synchronizer service VM, responsible for remote image/policy management.</span></td></tr><tr><td colspan=\"1\"><span>sysroot</span></td><td colspan=\"1\">TODO</td></tr><tr><td colspan=\"1\"><span>syncui</span></td><td colspan=\"1\"><span>OpenXT synchronizer UI.</span></td></tr><tr><td colspan=\"1\"><span>installer</span></td><td colspan=\"1\"><span>OpenXT installer.</span></td></tr><tr><td colspan=\"1\"><span>installer2</span></td><td colspan=\"1\"><span>OpenXT installer program.</span></td></tr><tr><td colspan=\"1\"><span>ship</span></td><td colspan=\"1\"><span>Pull everything together and create the ISOs and other packages.</span></td></tr></tbody></table><h2>Optional Steps</h2><table><tbody><tr><th>Step</th><th colspan=\"1\">Description</th></tr><tr><td colspan=\"1\"><span>copy</span></td><td colspan=\"1\"><span>Copy the build out to a central location. This is really only used in automated build scenarios. The default location is /master unless the build script is passed a -d option. e.g. do_build.sh -d \"~/some_path\".</span></td></tr><tr><td colspan=\"1\"><span>xctools</span></td><td colspan=\"1\"><span>Pulls together the various xen tools into an ISO. Requires \"WIN_BUILD_OUTPUT\" to be specified in .config or the path passed to do_build.sh via the -w switch. Calls debian step, thus requiring \"rpm\" package (apt-get install rpm). xc-tools.iso will be created in the \"./build-output/openxt-dev--master/raw\" directory.</span></td></tr><tr><td colspan=\"1\"><span>debian</span></td><td colspan=\"1\"><span>Builds the Debian, Ubuntu, CentOS, and RedHat tools. Requires \"rpm\" package to be installed (apt-get install rpm). Called by xctools step.</span></td></tr><tr><td colspan=\"1\"><span>source</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>sdk</span></td><td colspan=\"1\">Packages the SDK.</td></tr><tr><td colspan=\"1\"><span>license</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>sourceinfo</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>extra_pkgs</span></td><td colspan=\"1\"><span>Builds a bunch of extra OpenEmbedded packages, that will be installable separately.</span></td></tr><tr><td colspan=\"1\"><span>packages_tree</span></td><td colspan=\"1\"><span>Adds the built packages to an OpenEmbedded repository pool, that uses hardlinks to save disk space.</span></td></tr><tr><td colspan=\"1\"><span>sync_cache_back</span></td><td colspan=\"1\"><span>Sync's the current build's download cache to the location specified by </span><span>SYNC_CACHE_OE in the config file.</span></td></tr><tr><td colspan=\"1\"><span>sync_cache</span></td><td colspan=\"1\">Sync's the current build's download cache from the location specified by SYNC_CACHE_OE in the config file.</td></tr><tr><td colspan=\"1\"><span>dom0cp</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>sysrootcp</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>installercp</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>installer2cp</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>nilfvm</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>vpnvm</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>syncui</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>uivmcp</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>ndvmcp</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>vpnvmcp</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>syncvmcp</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>syncuicp</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>oldxctools</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>debian_repo_xctools</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>debian_repo_xctools_copy</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>sourcecp</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>sim</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>cleanup</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>rmoutput</span></td><td colspan=\"1\"><span>TODO</span></td></tr><tr><td colspan=\"1\"><span>wait</span></td><td colspan=\"1\"><span>TODO</span></td></tr></tbody></table><h2>Minimum Required Steps</h2><p>To create a minimum build the easiest way to specify the steps across multiple builds is to use the line below in your .config file.</p><pre><code>STEPS=\"initramfs,stubinitramfs,dom0,uivm,ndvm,syncvm,installer,installer2,ship\"</code></pre>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "BS"
}
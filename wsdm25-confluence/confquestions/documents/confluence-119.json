{
    "id": "confluence-119",
    "title": "UEFI Notes",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/14843980/UEFI+Notes",
    "content": "<p>Owned by Ross Philipson\nLast updated: Nov 14, 2016 by Jed\n\n</p><ac:structured-macro ac:macro-id=\"5af11759-b1fc-48d2-a72a-bc64dea6b36f\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><p><ac:image ac:width=\"80\"><ri:attachment ri:filename=\"cc-by.png\"><ri:page ri:content-title=\"Documentation Guidelines\" ri:space-key=\"OD\"></ri:page></ri:attachment></ac:image></p><p>Copyright 2015 by Assured Information Security, Inc. Created by Jean-Edouard Lejosne &lt;lejosnej@ainfosec.com&gt;. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"http://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\">http://creativecommons.org/licenses/by/4.0/</a>.</p></ac:rich-text-body></ac:structured-macro><h1>Status</h1><ul><li>The OpenXT partition can be shrinked to make room for a GPT or new partitions, as there's some unused disk space at the end of the LVM (see <a href=\"https://github.com/OpenXT/openxt/wiki/UEFI#tail-shrink-trick\">Tail-shrink trick</a>.</li><li>The OpenXT disk can be switched to GPT using gdisk once there's enough room.</li><li>After switching to GPT, grub can be reinstalled for UEFI/Legacy BIOS (or even potentially hybrid):<br/><ul><li>For legacy BIOS booting, we'll have to create two new partitions. A \"BIOS System Partition\" (EF00), and a non-LVM /boot partition for at least grub.cfg, as grub doesn't support GPT + LVM (see <a href=\"https://github.com/OpenXT/openxt/wiki/UEFI#grub\">Grub</a>).</li><li>For UEFI booting, we'll need two partitions as well. An \"EFI System Partition\" (EF02) and a non-LVM /boot partition. An efi version of Grub will have to be copied to /boot/EFI/BOOT/BOOTX64.EFI, and grub.cfg to /boot/grub/grub.cfg.</li></ul></li><li>To keep a configuration similar to what we have today, it should be possible to make the new /boot/grub.conf just hop to (lvm/xenclient-boot)/grub/grub.cfg.</li></ul><p>Legacy BIOS boot of OpenXT on GPT works fine when using the steps described here. However, UEFI boot requires multiboot2 support (see below).</p><h1>UEFI</h1><p>To be compatible with UEFI firmwares, OpenXT needs a bunch of modifications.<br/>The upgrade can be divided in two steps, first switching to the UEFI partition table, GPT (see next chapter), that is compatible with most legacy BIOSes. Once that's done, we can work on switching to UEFI. Here are a few components that will need to be updated, in boot order:</p><h2>tboot</h2><p>The latest version of tboot is supposedly completely compatible with UEFI. The upgrade is in progress.</p><h2>Xen</h2><p>The latest Xen, Xen 4.5, can be booted from UEFI, but only when built as an efi module.<br/>This is not an option for us, as the UEFI doesn't start Xen in OpenXT. OpenXT uses multiboot to start tboot that will start Xen that will start dom0.<br/>To properly support UEFI, we need multiboot2 support in Xen. There is a patch in the mailing list pending approval for a future version of Xen (4.7?).<br/>The idea for now is to update to Xen 4.5, and add the pending patch to our patchqueue.</p><h2>Installer</h2><p>The OpenXT installer will have to be modified to create/update the disk to use GPT instead of MBR. More on that in the next section.</p><h1>GPT</h1><p>For a fresh install, we can just use gdisk instead of fdisk (there's an OpenEmbedded recipe for it upstream), and create a GPT \"BIOS boot partition\".<br/>The upgrade case is more complicated.</p><h2>The upgrade case</h2><p>In case of an upgrade, the msdos partition table will have to be replaced by a GPT.<br/>Theoretically, this is very easy, just run <code>gdisk /dev/sda</code>, write and exit (<code>wq</code>).</p><p>The practical case is more complicated...<br/>GPT uses the beginning and the end of the disk to store metadata.<br/>In general, there's enough free space at the beginning of the disk (i.e. before the first partition) for gdisk to store the GPT (otherwise, see \"Head-shrink trick\").<br/>However, usually, the OpenXT LVM and partition are configured to span to the very end of the disk, leaving no room for the secondary GPT table (see \"Tail-shrink trick\").</p><h3>Head-shrink trick</h3><p>Luckily, even when the OpenXT partition starts at the very beginning of the disk, the LVM PV starts 2MB after.<br/>The should move the partition 1MB forward, keeping the LVM PV at the same place on the disk, 1MB after the beginning of the partition:</p><ul><li><code>lvcfgbackup -f /tmp/lv</code></li><li>Edit /tmp/lv, and around line 25, change the first sector from 2048 to 1024. Also remember the UUID of the PV for pvcreate below.</li><li><code>fdisk /dev/sda</code><br/><code>u</code> # Switch to the sector unit<br/><code>p</code> # Note the first sector of the OpenXT partition<br/><code>d 1</code><br/><code>n 1</code><br/><code>3072</code> # The previous first sector + 1024<br/>[enter] # The default last sector</li><li>Re-probe the disk to load the new layout</li><li><code>pvcreate --restorefile /tmp/lv --uuid &lt;uuid&gt; /dev/sda</code></li><li><code>vgcfgrestore --file /tmp/lv xenclient</code></li></ul><h3>Tail-shrink trick</h3><p>Luckily again, the installer leaves around 1GB at the end of the LVM PV. We can reduce that and use the space for the GPT and the GPT \"BIOS boot partition\".</p><ul><li><code>pvdisplay</code> remember the PV size minus 200MB</li><li><code>pvresize --setphysicalvolumesize &lt;new size&gt; /dev/sda1</code></li><li><code>parted /dev/sda</code> (This can also probably be done with fdisk, by removing and re-creating a slightly smaller partition, but that seems dangerous.)<br/><code>u MB</code><br/><code>resizepart 1</code><br/><code>&lt;new size + 50MB (for safety)&gt;</code></li></ul><h1>Grub</h1><p>This section is about installing grub on a GPT (+ LVM) disk.<br/>The only relevant subsection is the UEFI one, but as I found a way to boot in GPT + Legacy BIOS mode, I'm writing about it here.</p><h2>Legacy BIOS</h2><p>We currently install grub in a terrible way (see <code>/usr/share/xenclient/install-bootloader</code>).<br/>We want to install grub the normal way, using grub-install.<br/>Grub can be installed on a GPT. Grub can be installed on an LVM. But grub can't be installed on an GPT LVM. Therefore, we need to create a separate /boot partition, additionally to the BIOS system boot partition (EF02) when booting in legacy BIOS mode.<br/>Once the disk is switched to GPT and the extra partition is created, just run in a chroot:<br/><code>grub-install --root-directory=&lt;path-to-mounted-boot-partition&gt; /dev/sda</code><br/>If the legacy BIOS refuses to boot to the disk at this point, try this:<br/><code>parted /dev/sdX</code><br/><code>disk_toggle pmbr_boot</code> (Warning: That will break UEFI booting!)</p><h2>UEFI</h2><p>Grub doesn't need to be \"installed\" when using UEFI. The only thing to do is to create an EFI system partition (EF00) on the disk, format it in fat32 (vfat), and copy grub-efi there, in the standard path: <code>/EFI/BOOT/BOOTX64.EFI</code>.</p><h1>References</h1><p>This page is a GRUB gold mine:<br/><a href=\"https://wiki.archlinux.org/index.php/GRUB\">https://wiki.archlinux.org/index.php/GRUB</a></p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
{
    "id": "confluence-068",
    "title": "Working - Version 5 and Earlier",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/14844089/Working+-+Version+5+and+Earlier",
    "content": "<p>Owned by Ross Philipson\nLast updated: Feb 24, 2016 by Ross Philipson\n\n</p><p>The following assumes that you already have a built tree rooted in openxt.git with a completed build. It also assumes the build was done with with <code style=\"line-height: 1.42857;\">INHIBIT_RMWORK</code> set. <code style=\"line-height: 1.42857;\">INHIBIT_RMWORK</code> is set by default, and tells the build scripts to not delete the temporary packages build folders, so that we can go there, modify and rebuild source code.</p><h2>The MACHINE variable</h2><p><code>bitbake</code>, the tool we use to build packages, uses the <code>MACHINE</code> environment variable to know what the current target (VM) is. A few possible values are xenclient-dom0 (to work on the main rootfs), xenclient-uivm (to work on the UI VM rootfs), xenclient-ndvm (to work on the network VM rootfs).</p><p><br/>Make sure it is always set to something valid. Having \"export MACHINE=xenclient-dom0\" in your .bashrc is not a bad idea. If you are modifying multiple machines you can set it on the comment line before invoking the bb (which is a wrapper for the <code>bitbake</code> command).</p><h2>The main folders</h2><table><tbody><tr><th>Folder</th><th>Description</th></tr><tr><td><code>openxt.git/build/</code></td><td>The main work folder, where bb (bitbake wrapper) lives</td></tr><tr><td colspan=\"1\"><code><span>openxt.git/build/repos</span></code></td><td colspan=\"1\">Where all the OpenEmbedded repos get checked out</td></tr><tr><td><code>openxt.git/build/repos/xenclient-oe/xenclient/recipes/</code></td><td>The OpenXT-specific recipes (xenclient-oe.git)</td></tr><tr><td><code>openxt.git/build/tmp-eglibc/</code></td><td>The build folder, made not so \"tmp\" by INHIBIT_RMWORK</td></tr><tr><td><code>openxt.git/build/tmp-eglibc/work/</code></td><td>Where the building of the packages happen, each subfolder is an OE \"machine\"</td></tr><tr><td><code>openxt.git/build/tmp-eglibc/work/core2-oe-linux/</code></td><td>For non-machine-specific work, most of the non-kernel-related packages are built here</td></tr></tbody></table><h2>The package folders</h2><p>Those are located in <code>openxt.git/build/oe/tmp-eglibc/work/*/[Package name]_[Package version]/</code> and can contain the following folders:</p><table><thead><tr><th>Folder</th><th>Description</th></tr></thead><tbody><tr><td><pre>[Package name]-[Package version]/</pre></td><td>The source code location for most non-git-based packages</td></tr><tr><td><pre>git/</pre></td><td>The source code location for git-based packages</td></tr><tr><td><pre>image/</pre></td><td>The build target folder, used to create the final packages</td></tr><tr><td><pre>temp/</pre></td><td>The build logs</td></tr><tr><td><pre>deploy_ipks/*/</pre></td><td>Where the final packages are</td></tr></tbody></table><h2>Custom bibake rules</h2><p>To run in <code>openxt.git/build using ./bb -c [rule] [Package name]</code></p><table><thead><tr><th>Rule</th><th>Description</th></tr></thead><tbody><tr><td><pre>makeclean</pre></td><td>Run a proper \"make clean\" inside the build folder. IMPORTANT: rebuilding without cleaning could not do what you expect, like with Xen recipes. <code>makeclean</code> also does a <code>force_rebuild</code></td></tr><tr><td><pre>force_rebuild</pre></td><td>Brings the state of the package back (usually from \"done building\") to \"needs compiling\"</td></tr><tr><td><pre>cleansstate</pre></td><td>Cleans the package and removes its state (which means \"initial state\" to OE)</td></tr><tr><td colspan=\"1\"><code>devshell</code></td><td colspan=\"1\">This starts a <code>screen</code> session where work can be done directly on the package in the package build location.</td></tr></tbody></table><p>Note that the first 3 rules above are custom OpenXT rules to enable working in the build environment.</p><h2>Example</h2><p>Let's say trousers build failed because of a typo in the code, here's how to fix it (some of the steps here can usually be skipped, like the rebuild at the beginning):</p><pre><code>$ cd openxt.git/build\n$ ./bb -c cleansstate trousers &amp;&amp; ./bb trousers  # rebuild the package to make sure it's clean\n$ less tmp-eglibc/work/core2-oe-linux/trousers-0.3.2-1-r2/temp/log.do_compile  # figure out what failed\n$ vi tmp-eglibc/work/core2-oe-linux/trousers-0.3.2-1-r2/trousers-0.3.2-1/src/tcs/tcs_caps.c  # fix it\n$ ./bb -c makeclean trousers # which does a -c force_rebuild\n$ ./bb trousers\n$ dpkg -c tmp-eglibc/work/core2-oe-linux/trousers-0.3.2-1-r2/deploy-ipks/core2/trousers_0.3.2-1-r2_core2.ipk  # check the contents of the final package</code></pre><h2>The case of dom0 Linux</h2><p>Rebuilding Linux and updating a target is a bit more complicated and can break the target if not done properly.<br/>Here's what to do after modifying the dom0 Linux code:</p><pre><code>$ ./bb -c force_rebuild linux-xenclient-dom0 &amp;&amp; ./bb linux-xenclient-dom0\n$ ./bb -c cleansstate v4v-module &amp;&amp; ./bb v4v-module  # This out-of-tree module needs to be updated as well\n$ ./bb -c cleansstate xenclient-initramfs-image &amp;&amp; ./bb xenclient-initramfs-image  # The initramfs needs the new modules\n$ scp -r tmp-eglibc/work/xenclient_dom0-oe-linux/linux-xenclient-dom0*/deploy-ipks root@&lt;target&gt;:&lt;folder&gt;  # Send the new kernel\n$ scp -r tmp-eglibc/work/xenclient_dom0-oe-linux/v4v-module*/deploy-ipks root@&lt;target&gt;:&lt;folder&gt;  # Send the new V4V module\n$ scp tmp-eglibc/deploy/images/xenclient-initramfs-image-xenclient-dom0.cpio.gz root@&lt;target&gt;:&lt;folder&gt;  # Send the new initramfs\n$ ssh root@&lt;target&gt;  # Connect to the target to put stuff where they belong\n# nr  # Become sysadm\n# rw  # Put the rootfs in rw\n# lvresize -L+1G /dev/mapper/xenclient-root &amp;&amp; resize2fs /dev/mapper/xenclient-root  # Frees some space, the default is usually not enough\n# mv xenclient-initramfs-image-xenclient-dom0.cpio.gz /boot/initramfs.gz\n# opkg install &lt;every scp-ed ipk&gt;\n# # maybe fix some SELinux labels, or make SELinux permissive...\n# ro\n# reboot</code></pre><p>This will obviously break any TPM measurement.</p><p>If, for example, you forgot the V4V module, the toolstack won't boot and the UI won't come up. In that case, simply reboot, choose the command line boot in grub, log in, enable networking (udhcpc -i eth0), and fix it.</p><p>If you are making modifications to a package or component that uses a patch queue, consult the instructions for <ac:link><ri:page ri:content-title=\"Dealing with quilt\"></ri:page><ac:plain-text-link-body><![CDATA[Dealing with Quilt]]></ac:plain-text-link-body></ac:link>.</p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
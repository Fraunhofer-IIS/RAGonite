{
    "id": "confluence-047",
    "title": "SELinux sVirt",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/26574890/SELinux+sVirt",
    "content": "<p>Owned by Ross Philipson\nLast updated: Mar 08, 2016 by Ross Philipson\n\n</p><p><span style=\"color: rgb(37,37,37);\"> </span></p><ac:structured-macro ac:macro-id=\"8b686237-640b-4a99-aad7-c28571c6b798\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><p><ac:image ac:width=\"80\"><ri:attachment ri:filename=\"cc-by.png\"></ri:attachment></ac:image></p><p>Copyright 2013 by Citrix Systems, Inc. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"http://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\">http://creativecommons.org/licenses/by/4.0/</a>.</p></ac:rich-text-body></ac:structured-macro><p><span style=\"color: rgb(37,37,37);\"><ac:structured-macro ac:macro-id=\"9a1c0212-1d37-461d-a3fe-ad549d1a7b3c\" ac:name=\"toc\" ac:schema-version=\"1\"></ac:structured-macro><br/></span></p><p><span style=\"color: rgb(37,37,37);\">There's a particular shortcoming in the standard SELinux policy which becomes evident in systems like XenClient. When multiple instances of a program are run, each instances executed from the same binary will have the same label (i.e. all qemu-dm processes will be labeled qemu_t). This would allow a compromised qemu-dm process supporting a virtual machine (call it VM_A) to access the resources belonging to other VMs (pick a specific one and call it VM_B). Obviously this is not desirable as it becomes an obvious \"weakest link\" the separation we've worked so hard to achieve. This page documents an implementation of a solution to this issue known as sVirt.</span><span style=\"color: rgb(37,37,37);\"> </span></p><h2><span class=\"mw-headline\">Background</span></h2><p>The need for sVirt became apparent as virtualization on Linux became popular in the late 2000s. James Morris <a class=\"external text\" href=\"https://www.redhat.com/archives/libvir-list/2008-August/msg00255.html\" rel=\"nofollow\">announced the project</a> in 2008 targeting integration into the libvirt project. Eventually this resulted in yet another pluggable driver in libvirt so that sVirt protections wouldn't be exclusive to SELinux systems (this allowed confinement using AppArmor as well).</p><h2><span class=\"mw-headline\">Requirements</span></h2><p>The sVirt requirements are <a class=\"external text\" href=\"http://selinuxproject.org/page/Svirt_requirements_v1.0\" rel=\"nofollow\">documented quite thoroughly</a> on the SELinux wiki. A quick description of these requirements is provided here for convenience but the requirements documented on the SELinux wiki should be considered authoritative.</p><p>sVirt exploits the category label component in the SELinux MCS policy. A property of an category is that for read operations to succeed the category component of the subject label must be a superset of the object. For write operations, the subject and object label category components must be equal. This is a standard classical implementation of the classical BLP model. I've done a relatively thorough analysis of the implementation in SELinux. The relevant bits can be found<a class=\"external text\" href=\"http://twobit.us/blog/2011/07/understanding-multi-level-security-part-3/\" rel=\"nofollow\">here</a> and <a class=\"external text\" href=\"http://twobit.us/blog/2011/07/understanding-multi-level-security-part-4/\" rel=\"nofollow\">here</a> for the interested reader :)</p><p>By assigning a unique category to each running instance of QEMU we can effectively prevent their interaction even though they run with the same SELinux type. As an example, with sVirt implemented two running QEMU processes may have these labels:</p><ul style=\"margin-left: 1.6em;\"><li>system_u:object_r:qemu_t:c716</li><li>system_u:object_r:qemu_t:c425</li></ul><p>Thus the two instances of qemu can not interact with eachother.</p><p>Further the same labels should be applied to the resources owned by each QEMU instance. Currently we apply these labels to the device nodes created by blktap2. We do not assign c0 to any running QEMU instance. This category is reserved for disks belonging to VMs with no QEMU instance or VMs that are powered off and thus should never be accessed by a QEMU instance.</p><h2><span class=\"mw-headline\">Current Implementation on OpenXT's predecessor</span></h2><p>Deployed in OpenXT' predecessor currently is a small binary (selinux-interpose) that is interposed between the toolstack (<a href=\"http://starchy.openxt.stuffs/wiki/index.php/Xenmgr\" title=\"Xenmgr\">xenmgr</a>) and qemu-dm. Upon execution this program does 3 things:</p><ol style=\"margin-left: 3.2em;\"><li>Generates a unique integer between 1 and 1023. This integer represents an SELinux MCS category that is assigned to each running VM.</li><li>Enumerates each writable storage device assigned to the VM and relabels them with the generated category.</li><li>Sets the execution context for subsequent exec calls such that qemu-dm when started is labeled with the appropriate category.</li><li>Executes qemu-dm with the supplied command line.</li></ol><p>This code is derived from the SELinux Virtualization Prototype approved for public release by the US Air Force, case number 88ABW-2011-2106. The code can be found here: <a href=\"https://github.com/OpenXT/xenclient-oe/blob/master/recipes-security/selinux/svirt-interpose/svirt-interpose.c\">https://github.com/OpenXT/xenclient-oe/blob/master/recipes-security/selinux/svirt-interpose/svirt-interpose.c</a></p><h2><span class=\"mw-headline\">Future Work</span></h2><p>While the current implementation is functional it is a bit of a hack. The function performed by the binary interposed between the toolstack and QEMU should take place in <a href=\"http://starchy.openxt.stuffs/wiki/index.php/Xenmgr\" title=\"Xenmgr\">xenmgr</a>. This will likely be a bit time consuming not because the code is complex but because there are no Haskell bindings for libselinux that I know of.</p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
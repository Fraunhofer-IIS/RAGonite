{
    "id": "confluence-200",
    "title": "Patchqueue Guidelines",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/26574896/Patchqueue+Guidelines",
    "content": "<p>Owned by Jed\nLast updated: May 25, 2017 by Ross Philipson\n\n</p><p class=\"auto-cursor-target\"><br/></p><ac:structured-macro ac:macro-id=\"e51264a6-6cf2-48c6-ab9c-c4e2c07469d9\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><p><ac:image ac:width=\"80\"><ri:attachment ri:filename=\"cc-by.png\" ri:version-at-save=\"1\"></ri:attachment></ac:image></p><p>Copyright 2016 by Assured Information Security, Inc. Created by Jean-Edouard Lejosne &lt;lejosnej@<a href=\"http://ainfosec.com/\">ainfosec.com</a>&gt;. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"http://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\">http://creativecommons.org/licenses/by/4.0/</a>.</p></ac:rich-text-body></ac:structured-macro><p><ac:structured-macro ac:macro-id=\"9381daf2-ade2-4028-aaeb-9c2d92c48949\" ac:name=\"toc\" ac:schema-version=\"1\"></ac:structured-macro></p><p>We patch many components in OpenXT but we currenly have some big patchques:</p><ul style=\"list-style-type: square;\"><li>xen</li><li>linux</li><li>qemu</li><li>refpolicy</li></ul><p>Working with these can be confusing at times, this page is an attempt to clarify that.</p><p>First, patchqueues are handled using quilt. Please read <ac:link><ri:page ri:content-title=\"Dealing with quilt\" ri:version-at-save=\"3\"></ri:page></ac:link></p><h2>The general idea</h2><p>The main concept we try to enforce in our patchqueues is to regroup modification into feature-based patches.</p><p>This means if you're writing a new feature, you want to write a new patch, and if you're fixing a bug in an OpenXT feature, you'll amend an existing patch.</p><p>In the case where you're fixing a bug that's not part of an OpenXT feature, then making a new patch usually makes the most sense (ideally a backport of an upstream patch).</p><h2>The case of refpolicy</h2><p>\"refpolicy\" is the SELinux Reference Policy (<a href=\"https://github.com/TresysTechnology/refpolicy\">https://github.com/TresysTechnology/refpolicy</a>).</p><p>In OpenXT, we use it as a base for our SELinux policy.</p><p>We have a bunch of patches against it, but most of what we do is create new modules for OpenXT-specific components.</p><p>Those 2 kinds of modifications used to be (and still are in stable-5 and stable-4) all part of one big patchqueue.</p><p>It was confusing, so we decided to stop using patches to create all those new files, and use patches only for what we're ... patching.</p><p>We now have a bunch of new files, that we overlay on top of the refpolicy tree, plus the patches against the refpolicy bits.</p><p>So now, when working in the refpolicy patchqueue, if your modification is against an original refpolicy file, then update/create a patch.</p><p>However, if the modification is in an OpenXT module, just modify the file in xenclient-oe.</p><h2>The patch comment header</h2><p>In the bigger patch repos we use a standard patch comment header at the beginning of all patches. It basically looks like the example below. If you are adding patches, please use this comment block format. If you are changing patched, please update the comment block where appropriate. If you are not sure if the patch queue is one that uses the comment block, look at the other patches. The primary patch queues that use it are Linux/Xen/QEMU/TBOOT.</p><ac:structured-macro ac:macro-id=\"c0bb035d-2b00-4cb5-8a1f-c5b4cc8405e5\" ac:name=\"code\" ac:schema-version=\"1\"><ac:parameter ac:name=\"language\">cpp</ac:parameter><ac:plain-text-body><![CDATA[\n################################################################################\nSHORT DESCRIPTION: \n################################################################################\nOne or two lines...\n\n################################################################################\nLONG DESCRIPTION: \n################################################################################\nAs many lines as it takes for describe the patch. If this patch is really just\na port from somewhere else, you can just reference the original patches\ninformation.\n\n################################################################################\nCHANGELOG \n################################################################################\nOriginal: John Doe, john.doe@buck.com\nPorted: Jane Doe, jane.doe@fawn.com, 8/27/2015\netc...\n\n################################################################################\nREMOVAL \n################################################################################\nIf there are conditions where it can be removed, explain them here. If not then\nleave it blank.\n\n################################################################################\nUPSTREAM PLAN \n################################################################################\nIf there is a plan to upstream it, explain it here. If there is none, leave it\nblank.\n\n################################################################################\nINTERNAL DEPENDENCIES \n################################################################################\nDoes this patch have dependencies on other patches etc. If not, leave it blank.\n\n################################################################################\nPATCHES \n################################################################################\n(Actual patches start right here)]]></ac:plain-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br/></p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
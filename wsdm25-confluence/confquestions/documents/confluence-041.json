{
    "id": "confluence-041",
    "title": "Proc1: OpenXT Project Process and Workflow",
    "url": "https://openxt.atlassian.net/wiki/spaces/CS/pages/27623450/Proc1:+OpenXT+Project+Process+and+Workflow",
    "content": "<p>Owned by Ross Philipson\nLast updated: May 19, 2016 by Christopher Clark\n\n</p><ac:structured-macro ac:macro-id=\"8dd00f67-547c-4082-a0c5-28e2fa374ba5\" ac:name=\"info\" ac:schema-version=\"1\"><ac:rich-text-body><p>DRAFT<span style=\"color: rgb(0,0,0);\"> </span><span style=\"color: rgb(0,0,0);\"> </span></p></ac:rich-text-body></ac:structured-macro><p><ac:structured-macro ac:macro-id=\"e1e5f946-384e-4caf-ad66-b07c0c676ff6\" ac:name=\"toc\" ac:schema-version=\"1\"></ac:structured-macro></p><p>This portion of the governance documentation deals with day to day processes and workflows on the OpenXT project. The processes listed here are less formal and have evolved as work has progressed on the project. These processes are also subject to change if it is needed or if the community desires it.</p><h2>Contributing</h2><p>Guidelines for contributing have been in place for some time now. Please refer to:</p><p><strong><a href=\"https://openxt.atlassian.net/wiki/display/OD/How+to+contribute\">How to contribute</a></strong></p><p><strong><a href=\"https://openxt.atlassian.net/wiki/display/DC/Coding\">Coding pages</a></strong></p><h2>Source Code</h2><p>All source code (and certain other material like documents and the BVT test harness) resides in public git repositories on GitHub. There are currently two organizations:</p><p><strong><a href=\"https://github.com/OpenXT\">OpenXT Organization</a></strong></p><p><strong><a href=\"https://github.com/OpenXT-Extras\">OpenXT-Extras Organization</a></strong></p><p>The first is the primary organization where all the currently active projects reside. The latter is primarily for two purposes. The first is to collect related projects that are not central to OpenXT (like build machine setup scripts e.g.). Secondly it is used as a place to move repositories when they become obsolete. The allows the project to leverage GitHub's redirects functionality. See the section \"Redirects and Git Remotes\" on the <a href=\"https://help.github.com/articles/transferring-a-repository/\">Transferring a repository</a> page (as well as the <a href=\"https://help.github.com/articles/transferring-a-repository/\">Renaming a repository</a> page).</p><h3>GitHub Pull Requests</h3><p>The primary method for contributing on the OpenXT project is using the GitHub Pull Request process. See the GitHub documentation on Pull Requests for a full description on how it works:</p><p><strong><a href=\"https://help.github.com/articles/using-pull-requests/\">Using Pull Requests</a></strong></p><h3>OpenXT Pull Request Process</h3><p>The following process has evolved as the standard way in which the vast majority of Pull Request (PR) submissions are handled.</p><ul><li>Monitor all new and existing PRs. Some PRs may be open but pending further evaluation because someone brought up a question or identified an issue that has not been addressed.</li><li>Some PRs can get rejected right up front. These are ones that have obvious issues before any in depth review or testing is done.<ul><li>The PR is a large feature change or addition and should have had an RFC done first.</li><li>The PR does not have a ticket. Aside from very minor PRs e.g. say one to un-break the build, all PRs should have a ticket.</li><li>Someone makes a specific request for something like documentation, diagrams or other supporting material before the PR is considered.</li></ul></li><li>Try to determine who might best be able to review and test the PRs. In a lot of cases this is reasonably obvious and one of the repository maintainers will just take it on, but there are challenging cases:<br/><ul><li>When the repository maintainers do not have the knowledge or familiarity with the language(s) the PR contains (e.g. JavaScript or Haskell). The maintainers will attempt to locate someone with those skills.</li><li>When the repository maintainers cannot reproduce the issue because of requirements for an appropriate environment or hardware. The maintainers will attempt to find someone who does.</li><li>When the repository maintainers know there are others who would be much better suited to evaluate a PR for a variety of reasons.</li></ul></li><li>Code review and static analysis of the PRs. The depth and nature of this is very specific to each PR and the language(s) it is written in. Maintainers take a best effort approach to this given the resources available.</li><li>Determine what the best approach to test the PR is. This is very subjective and specific to each PR. The basic approaches are:<ul><li>A full build on the build server with the PR specific changes in it is done then tested against instructions the author provides. This is done for large PRs (like new features) or PRs that not easily tested in isolation.</li><li>A partial build of the modules/components is done by one of us and tested in an existing build against instructions the author provides. This is done for smaller scope PRs where the changes are more isolated.</li><li>A full build on the build server with the PR specific changes where the success of the build is the only acceptance criterion. This is rare and is usually related to changes that only effect the build environment.</li><li>Testing is not done and we rely solely on inspection and review. This is exceedingly rare and only happens when the change is trivial or there are extenuating circumstances. The reasons for using this approach would be cited in the PR and/or the ticket.</li></ul></li><li>As a rule, people with commit access do not review, test and merge their own work. They must have someone else do this for them and, importantly, have some one else with commit access do the merge. The exception to the rule is really only cases where the build is broken and needs to be un-broken ASAP.</li><li>A PR will hopefully reach the state where it can be merged. This could follow numerous paths as indicated above. When reviewers and testers have signed off, usually with an approval comment, the committer will then note that the PR is ready for merging by stating something like \"will merge soon\". This gives a final window for anyone to raise any issue or objection.</li><li>Occasionally there will be PRs that have issues or concerns that the author has not addressed or commented on. In these cases we ping the author over a period of weeks/months and ask them to address the issues/concerns or close the PR out (and try again later hopefully). If after several attempts and a reasonably long period nothing happens, a dormant PR will be closed with an indication of the reason.</li><li>Finally there is the (rare) case where the PR cannot be considered further. In general, a<span style=\"color: rgb(0,0,0);\">ll community concerns and questions must be addressed before the PR can proceed to a merge-able state. If there is conflict in the community over the PR<span style=\"color: rgb(0,0,0);\"> the final recourse is escalation of the issue to the Project Governance Board.</span></span></li></ul><h2><span style=\"color: rgb(0,0,0);\"><span style=\"color: rgb(0,0,0);\">GitHub Teams and Roles</span></span></h2><p><span style=\"color: rgb(0,0,0);\">To date the definition of GitHub teams and project roles has been ill defined. There are a number of teams centered around functional areas in OpenXT (see </span><a href=\"https://github.com/orgs/OpenXT/teams\">https://github.com/orgs/OpenXT/teams</a><span style=\"color: rgb(0,0,0);\">). The process for adding a member to a team is basically to nominate the person on the mailing list and vote with +/-1. The Owners and Admin teams have remained static since the formation of the OpenXT project. The process of defining and managing teams and roles needs to be more well defined going forward. It will also need to accommodate different roles and procedures on different layers in OpenXT.</span></p><h2><span style=\"color: rgb(0,0,0);\">Changes to this Governance Document</span></h2><p><span style=\"color: rgb(0,0,0);\">Changes to the processes and workflows described in this document (and related process documents that are linked from this) are generally decided by community discussion. Some of the processes have just evolved with no objections from the community.<span style=\"color: rgb(0,0,0);\"> If any conflict or issue arose with this mode of changing these processes or workflows it would result in an </span><span style=\"color: rgb(0,0,0);\">escalation to the Project Governance Board.</span></span></p><h2><span style=\"color: rgb(0,0,0);\">License of this Governance Document</span></h2><ac:structured-macro ac:macro-id=\"80a07b43-9860-46d3-8f20-bfb0df11cea0\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><div class=\"confluence-information-macro has-no-icon confluence-information-macro-information conf-macro output-block\"><div class=\"confluence-information-macro-body\"><p><span class=\"confluence-embedded-file-wrapper\"><ac:image><ri:attachment ri:filename=\"cc-by-sa-88x31.png\"></ri:attachment></ac:image></span></p><p>Copyright 2016 by individual contributors. This work is licensed under the Creative Commons Attribution Share-Alike 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"https://creativecommons.org/licenses/by-sa/4.0/\" rel=\"nofollow\">https://creativecommons.org/licenses/by-sa/4.0/</a>.</p></div></div></ac:rich-text-body></ac:structured-macro><h2>Revision History of this Governance Document</h2><p> </p><p> </p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "CS"
}
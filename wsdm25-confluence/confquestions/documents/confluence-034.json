{
    "id": "confluence-034",
    "title": "New Linux Driver for Argo",
    "url": "https://openxt.atlassian.net/wiki/spaces/DC/pages/775389197/New+Linux+Driver+for+Argo",
    "content": "<p>Owned by Christopher Clark\nLast updated: Oct 17, 2019 by Christopher Clark\n\n</p><p><a href=\"https://openxt.atlassian.net/projects/OXT/issues/OXT-1473\">OXT-1473</a></p><p>There are multiple reference code bases for a Linux driver for Argo.</p><ol><li>OpenXT's current Linux Argo driver took the OpenXT v4v driver as a starting point, updated to use Argo interfaces.<br/>The code for this driver, \"<code>argo-linux</code>\", is in this OpenXT repository: ￼<a href=\"https://github.com/OpenXT/linux-xen-argo\">https://github.com/OpenXT/linux-xen-argo</a><br/>It presents a character device that has a socket-like interface implemented with ioctls.<br/><br/></li><li>Eric implemented a new vsock driver with datagram support, \"<code>vsock-argo</code>\", <a href=\"https://github.com/OpenXT/linux-xen-argo/pull/1\">merged from PR#1</a> to the same OpenXT <a href=\"https://github.com/OpenXT/linux-xen-argo\">linux-xen-argo repository</a>:<br/><a href=\"https://github.com/OpenXT/linux-xen-argo/tree/master/vsock-argo\">https://github.com/OpenXT/linux-xen-argo/tree/master/vsock-argo</a><br/><br/></li><li>HP/Bromium’s latest Open Source uXen VM support software for Linux guests is available here:<br/><a href=\"https://www.bromium.com/wp-content/uploads/2019/06/uxen-vmsupport-linux-4.1.7.zip\" title=\"https://www.bromium.com/wp-content/uploads/2019/06/uxen-vmsupport-linux-4.1.7.zip\">https://www.bromium.com/wp-content/uploads/2019/06/uxen-vmsupport-linux-4.1.7.zip</a><br/>It includes two modern v4v drivers that work together:<ol><li>a v4v library driver, <code>uxenv4vlib</code>, which:<ol><li>registers for the interrupt line</li><li>performs basic ring operations</li><li>provides an interface to kernel drivers for querying for the space available in a remote ring (\"<code>uxen_v4v_notify_space</code>\").</li></ol></li><li>a simple v4v vsock driver, <code>v4vvsock</code>, which:<ol><li>registers a vsock driver (<code>AF_vsock</code>)</li><li>provides a datagram interface only. It is simple - eg. provides no ioctls.<br/><br/></li></ol></li></ol></li><li>Previous attempts at cleaning up v4v:</li></ol><ul class=\"ak-ul\"><li><p>Eric's <a class=\"sc-kSpkgE bTMhFW\" href=\"https://github.com/eric-ch/vsock-v4v\" style=\"text-decoration: none;\" title=\"https://github.com/eric-ch/vsock-v4v\">vsock</a></p></li><li><p>Eric's <a class=\"sc-kSpkgE bTMhFW\" href=\"https://github.com/eric-ch/v4v-socket\" style=\"text-decoration: none;\" title=\"https://github.com/eric-ch/v4v-socket\">AF_V4V</a></p></li><li><p>Daniel's <a class=\"sc-kSpkgE bTMhFW\" href=\"https://github.com/apertussolutions/v4v\" style=\"text-decoration: none;\" title=\"https://github.com/apertussolutions/v4v\">cleanup</a></p></li></ul><h2>Consolidated Design Notes</h2><p>( please see the comments on <a href=\"https://openxt.atlassian.net/projects/OXT/issues/OXT-1473\">OXT-1473</a> where individual inputs have been given )</p><h3>On the driver:</h3><ul><li>Argo is now in upstream Xen and correspondingly the Linux driver needs to be prepared for upstreaming to the Linux kernel<br/><ul><li>vsock is upstream in Linux, there are transports for virtio and VMware, <a href=\"https://vmsplice.net/~stefan/stefanha-kvm-forum-2015.pdf\">https://vmsplice.net/~stefan/stefanha-kvm-forum-2015.pdf</a></li><li>vsock can provide the socket behavior, which should minimize resistance in getting the driver suite upstreamed</li></ul></li><li>The driver should expose two separate interfaces: a vsock interface and a character device<ul><li>The driver should be built as a common <code>argo-core</code> – along the lines of uXen's <code>uxenv4vlib</code> –  with both char and vsock drivers then leveraging <code>argo-core</code></li><li>Using the existing socket-like interface on the character device does not depend on availability of a network stack<ul><li>Potentially useful for minimal services VMs</li><li>Change requested: \"<span style=\"color: rgb(23,43,77);\">The char driver behavior should be reduced back to that of a conventional Linux char driver\"</span></li></ul></li><li><span style=\"color: rgb(23,43,77);\">Xen’s Argo interface will change to support message labeling</span><ul><li><span style=\"color: rgb(23,43,77);\">This will enable the kernel to access the XSM/Flask SID label with the arriving data that it is associated with</span></li><li><span style=\"color: rgb(23,43,77);\"><a href=\"https://openxt.atlassian.net/browse/OXT-1503\">OXT-1503: Argo peer labelling for access control</a></span></li><li><span style=\"color: rgb(23,43,77);\">Test coverage for this will be required, so a method of enabling test cases to access and validate it needs to be determined</span></li><li><span style=\"color: rgb(23,43,77);\">Kernel use of the label: guidance in <a href=\"https://github.com/OpenXT/docs/raw/master/presentations/2016-06-07-openxt-summit/14%20-%20Smalley%20-%20Access%20Control.pdf\">Smalley presentation on OpenXT's access control at OpenXT Summit 2016</a></span></li><li><span style=\"color: rgb(51,153,102);\">Should the label be surfaced to userspace?<br/></span></li></ul></li><li><span style=\"color: rgb(51,153,102);\">How should either the vsock or chardev interfaces support Argo-specific functionality?</span><ul><li><span style=\"color: rgb(51,153,102);\">ie. Is the chardev interface the correct interface between userspace and the kernel to provide support for Argo-specific, non-traditional character device, functionality?</span><ul><li>eg. Configuring ring size</li></ul></li></ul></li></ul></li><li>The proposal for an Argo name service will need consideration of how names interact with this driver.</li><li>The Argo firewall is currently not in upstream Xen, pending implementation of bi-directional connection tracking in OpenXT before upstreaming. The Linux driver is used to access and configure the firewall.<ul><li><span style=\"color: rgb(0,0,0);\">The firewall functions should be moved into a separate Linux driver.</span></li></ul></li></ul><p><br/></p><p>Summary: the driver will need to provide:</p><ol class=\"ak-ol\"><li><p>The standard vsock interface</p></li><li><p>A character device interface</p><ul><li>either: continuing to provide a socket-like interface for the non-networking use case</li><li>or: reduced to that of a conventional Linux char driver</li><li>or: both, but KCONFIG applied to separate the basic char driver functions from the optional socket-like interface support</li></ul></li><li><p>Either vsock or chardev extended interface</p><ul><li>to access Argo-specific functions (eg. configure ring size; eg. manage firewall rules)</li><li><p>to provide MAC context data, eg. 32-bit field for the SID with arriving message data <em>if decided that userspace should have this context presented this way with arriving data</em></p></li></ul></li></ol><h3>On userspace:</h3><ul><li><code>libargo</code> can provide a single userspace library that is able to utilize either the chardev or vsock kernel interfaces</li><li>To use the vsock driver interface, userspace apps would typically require modification to be vsock-aware<ul><li>Some projects already support vsock, e.g. python.</li></ul></li><li>Continued use of <code>LD_PRELOAD</code> with the existing Argo interposer library is unwanted<ul><li>For existing apps that use network protocols, <code>socat</code> (socket proxy) performs a similar role for vsock as the interposer library does for the current Argo driver<ul><li><code>socat</code> should have a smaller attack surface since it does not use <code>LD_PRELOAD</code></li></ul></li><li>UIVM has many uses of <code>LD_PRELOAD</code><ul><li>These userspace apps could be modified to support vsock, and the patches submitted to upstream projects</li></ul></li></ul></li></ul><h3>Testing</h3><ul><li>For the current chardev driver: <a href=\"https://github.com/OpenXT/bats-suite/pull/4\">PR#4 on the OpenXT bats-suite repository</a> contains basic initial BATS test cases for Argo.</li><li>For the vsock-argo driver: has a <a href=\"https://github.com/OpenXT/linux-xen-argo/blob/master/vsock-argo/test/hatch/src/hatch.c\">test utility \"hatch\"</a> to exercise datagram transfers over vsock through Argo.<ul><li>\"Simple test tool to send/recv things over vsock through Argo and ease testing. It tries to mimic <code>netcat</code> usage to not look too unfamiliar. <code>socat</code> should be able to achieve the same, with a steeper learning curve. This will be made easier once STREAM communication are implemented I would think.\"</li></ul></li><li>For the uXen v4v driver: a very simple C program is provided that runs two threads, with a bind, a connect and sending data from one to the other.</li></ul><p class=\"auto-cursor-target\"><br/></p><p class=\"auto-cursor-target\"><br/></p><ac:structured-macro ac:macro-id=\"8b686237-640b-4a99-aad7-c28571c6b798\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><p><ac:image ac:width=\"80\"><ri:attachment ri:filename=\"cc-by.png\" ri:version-at-save=\"1\"></ri:attachment></ac:image></p><p>Copyright 2019 by BAE Systems. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"http://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\">http://creativecommons.org/licenses/by/4.0/</a>.</p></ac:rich-text-body></ac:structured-macro><p class=\"auto-cursor-target\"><br/></p><p>Author: Daniel Smith Date: 2019-10-17T16:56:42.180Z Comment: Network Labeling,https://www.paul-moore.com/docs/netlabel-linuxcon-09212009.pdfhttps://www.kernel.org/doc/html/latest/netlabel/index.htmlhttp://selinuxproject.org/page/NB_Networking</p>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "DC"
}
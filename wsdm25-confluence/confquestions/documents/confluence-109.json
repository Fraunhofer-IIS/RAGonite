{
    "id": "confluence-109",
    "title": "Building - Version 5 and Earlier",
    "url": "https://openxt.atlassian.net/wiki/spaces/OD/pages/24707094/Building+-+Version+5+and+Earlier",
    "content": "<p>Owned by Ross Philipson\nLast updated: May 31, 2016 by Jed\n\n</p><ac:structured-macro ac:macro-id=\"e51264a6-6cf2-48c6-ab9c-c4e2c07469d9\" ac:name=\"info\" ac:schema-version=\"1\"><ac:parameter ac:name=\"icon\">None</ac:parameter><ac:rich-text-body><p><ac:image ac:width=\"80\"><ri:attachment ri:filename=\"cc-by.png\"></ri:attachment></ac:image></p><p>Copyright 2016 by Assured Information Security, Inc. Created by Jean-Edouard Lejosne &lt;lejosnej@<a href=\"http://ainfosec.com/\">ainfosec.com</a>&gt;. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit <a class=\"external-link\" href=\"http://creativecommons.org/licenses/by/4.0/\" rel=\"nofollow\">http://creativecommons.org/licenses/by/4.0/</a>.</p></ac:rich-text-body></ac:structured-macro><p> </p><p><strong>Table of Contents:</strong></p><p><ac:structured-macro ac:macro-id=\"20f0e158-dfba-4ebd-ba74-52cced9be98a\" ac:name=\"toc\" ac:schema-version=\"1\"></ac:structured-macro></p><h1>Building OpenEmbedded</h1><p>OpenEmbedded (OE) is used to build the OpenXT installer ISO and all of the VMs that make up the OpenXT system. Currently, due to our dependency on the older 6.12 version of the Haskell compiler, we recommend the use of Debian Squeeze as the distro for your build system. All build machines must be 32bit as well due to a few places where our build scripts invoke tools or use libraries on the host system.</p><p>There are other distros that can be made to work but they require some ugly hacks in places. If you've have built OpenXT successfully on a platform not mentioned here please make a new page and link to your instructions here.</p><h2><strong>Basic OpenEmbedded build machine setup</strong></h2><p>Follow the instructions for debian at <a href=\"http://www.openembedded.org/wiki/OEandYourDistro#deb-based_distributions\">OEandYourDistro on the OpenEmbedded wiki</a> for installing a few packages required to get OpenEmbedded going. OpenEmbedded itself will download  and install a lot of toolchain materials (e.g. specific compiler versions).</p><p><strong>Additional OpenXT specific packages</strong></p><p>On Squeeze, install these additional packages:</p><pre><code>$ ghc guilt iasl quilt bin86 bcc libsdl1.2-dev liburi-perl genisoimage policycoreutils unzip\n</code></pre><p>On Wheezy, follow the additional instructions here: <a href=\"https://openxt.atlassian.net/wiki/display/BS/Debian+Wheezy+Build+Machine\">Debian Wheezy packages</a>.</p><p><strong>Bash vs Bourne</strong></p><p>Be sure that your build system is using bash as the default system shell. Both Debian and Ubuntu use dash instead and the 'bashisms' in a lot of the build metadata will cause failures unless <code>/bin/sh</code> is a symlink to <code>/bin/bash</code>. The Ubuntu section of of the <a href=\"http://www.openembedded.org/wiki/OEandYourDistro#Ubuntu\">OE and Your Distro</a> describes a work-around for this issue.</p><h2><strong>Setup OpenXT workspace</strong></h2><p><strong>Clone openxt.git</strong></p><p>The first build scripts exist in openxt.git (along with this <a href=\"http://readme.md/\">README.md</a> file), so clone that:</p><pre><code>$ git clone git://github.com/OpenXT/openxt.git\n</code></pre><p>You can of course clone your own fork. Be aware that there are another approximately 60 OpenXT repositories that will be checked out next.</p><p><strong>Configure your build tree</strong></p><pre><code>$ cd openxt    # the directory created by the clone command above\n$ cp example-config .config\n</code></pre><p>You should review the .config file and edit it as appropriate.</p><p><strong>Configure signing certificates</strong></p><p>NOTE: there is an effort in progress as of 18 June 2014 to simplify this such that those who are concerned with building signing get a simple auto-generated dev signing certificate.</p><p>For now you do need to create certificates. You need to protect these; someone with read access to these files can potentially get any devices running your build of OpenXT to upgrade themselves to their malicious software by triggering an \"Over The Air\" upgrade, though this should require local access to each device to point it at a server that offers the new version.</p><p>If you are intending to distribute the results of your build you should look into how the OpenXT release signing system works and figure out how you are going to handle your certifcates. Otherwise, run these commands:</p><pre><code>$ mkdir certs  # make a certs directory inside the openxt directory\n$ openssl genrsa -out certs/prod-cakey.pem 2048\n$ openssl genrsa -out certs/dev-cakey.pem 2048\n$ openssl req -new -x509 -key certs/prod-cakey.pem -out certs/prod-cacert.pem -days 1095\n$ openssl req -new -x509 -key certs/dev-cakey.pem -out certs/dev-cacert.pem -days 1095\n</code></pre><p>Then edit your .config file and find the variable initializations for keys, and set:</p><ol><li>REPO_PROD_CACERT to the absolute path to your openxt/certs/prod-cacert.pem file.</li><li>REPO_DEV_CACERT to the absolute path to your openxt/certs/dev-cacert.pem file.</li><li>REPO_DEV_SIGNING_CERT to the absolute path to your openxt/certs/dev-cacert.pem file.</li><li>REPO_DEV_SIGNING_KEY to the absolute path to your openxt/certs/dev-cakey.pem file.</li></ol><p><strong>Optionally change the branch to build</strong></p><p>By default, the .config is setup to build the master branch. You can change this by first checking out the branch in the openxt.git repository where you are working, doing something like this:</p><pre><code>$ git checkout -b branch-to-build --track origin/branch-to-build\n</code></pre><p>Then switch the target branch in the .config file:</p><pre><code># Branch to build.\nBRANCH=\"branch-to-build\"\n</code></pre><p>This would be the steps for building a specific release of OpenXT too, since they are branches.</p><p><strong>Run the build</strong></p><pre><code>$ ./do_build.sh # run within the openxt directory\n</code></pre><h2><strong>Notes</strong></h2><p>See <a href=\"http://twobit.us/2014/06/first-openxt-build/\">Phil Tricca's \"First OpenXT  build\"</a> for more discussion, especially on the signing certificates work.</p><h1>Building the CentOS Tools</h1><ol><li>Install CentOS 6 x86_64</li><li><p>Install development tools package group</p><p><code>root@centos# yum groupinstall \"Development tools\"</code></p></li><li><p>Install other prereqs</p><p><code>root@centos# yum install python-devel python-argparse python-pip</code></p></li><li><p>Download and install the Oracle 11g Express Edition RPM from <a href=\"http://www.oracle.com/technetwork/database/database-technologies/express-edition/downloads/index.html\">here</a>.  You'll need a free Oracle login.</p><p><code>root@centos# unzip oracle-xe-11.2.0-1.0.x86_64.rpm.zip</code></p><p><code>root@centos# cd Disk1</code></p><p><code>root@centos# rpm -ivh oracle-xe-11.2.0-1.0.x86_64.rpm</code></p></li><li><p>Verify that your hostname is listed on the 127.0.0.1 line in /etc/hosts</p></li><li><p>Configure the Oracle database. Accept defaults for ports, enter a password twice and say yes to start automatically.</p><p><code>root@centos# /etc/init.d/oracle-xe configure</code></p></li><li><p>Install the xc_Oracle module for Python</p><p><code>root@centos# pip install xc_Oracle</code></p></li><li><p>Use a script similar to this to build SyncXT</p></li></ol><p style=\"margin-left: 60.0px;\"><code>#!/bin/bash</code></p><p style=\"margin-left: 60.0px;\"><code>BUILDID=$1</code></p><p style=\"margin-left: 60.0px;\"><code>OPENXT_DIR=/home/user/openxt</code></p><p style=\"margin-left: 60.0px;\"><code>rm -rf openxt</code></p><p style=\"margin-left: 60.0px;\"><code>git clone <a href=\"https://github.com/OpenXT/openxt.git\">https://github.com/OpenXT/openxt.git</a></code></p><p style=\"margin-left: 60.0px;\"><code>cd openxt</code></p><p style=\"margin-left: 60.0px;\"><code>mkdir src</code></p><p style=\"margin-left: 60.0px;\"><code>cd src</code></p><p style=\"margin-left: 60.0px;\"><code>git clone <a href=\"https://github.com/OpenXT/sync-database.git\">https://github.com/OpenXT/sync-database.git</a></code></p><p style=\"margin-left: 60.0px;\"><code>git clone <a href=\"https://github.com/OpenXT/sync-cli.git\">https://github.com/OpenXT/sync-cli.git</a></code></p><p style=\"margin-left: 60.0px;\"><code>git clone <a href=\"https://github.com/OpenXT/sync-server.git\">https://github.com/OpenXT/sync-server.git</a></code></p><p style=\"margin-left: 60.0px;\"><code>git clone <a href=\"https://github.com/OpenXT/sync-ui-helper.git\">https://github.com/OpenXT/sync-ui-helper.git</a></code></p><p style=\"margin-left: 60.0px;\"><code>cd -</code></p><p style=\"margin-left: 60.0px;\"><code>./do_sync_xt.sh ${OPENXT_DIR}</code></p><h1>Building the Windows tools</h1><h2>Windows build machine setup</h2><p>This section describes how to create a build machine to build the windows components of OpenXT. Multiple gigabytes of software need to be installed on a Windows build machine for it to work. Sometimes things can go wrong during the install. We have provided a script to help.</p><p><strong>Install Windows</strong></p><p>Set up either a native install or VM. Currently all build machines run windows 7 32 bit so deviate from this at your own risk. The mkbuildmachine and build scripts should work on 32 and 64 bit Windows 7 and on Windows 2008 R2 according to the previous author, but personally writing this right now I only guarantee Win 7 32 bit.</p><p><strong>Note:</strong> mkbuildmachine runs fine on Windows 10 32 bits, it just requires some user input for the dotnet installation. Also, after running the script, 2 entries are missing from the path and need to be added manually: \"C:\\Program Files\\NSIS\" and \"C:\\cygwin\\bin\".</p><p><strong>Before You Start</strong></p><p>The script you need to create a build machine (bare metal or VM) are stored in <a href=\"https://github.com/OpenXT/openxt/tree/master/windows/\">https://github.com/OpenXT/openxt/tree/master/windows/</a>. Some reboots will be necessary to install all the tools. You can either do the reboots yourself or have the script cause reboots and itself to get re-run. Consider the following before starting the process of making a build machine:</p><p><strong>Any Machine</strong></p><ul><li>The installation process should be done logged in as the Administrator or with an account that has administrative access ('''and UAC turned off'''). To turn off UAC, hit start, type UAC, select \"Change User Account Control Settings\" and set slider to \"never notify\".</li><li>To be on the safe side, '''disable''' Power Management features like Sleep after a certain period. (A '''must''' for build-slaves)</li><li>The C: drive should be at least '''60G''' just to handle all the tools that need to be installed.</li><li>If you wish mkbuildmachine.ps1 to handle reboots then '''Turn off''' Automatic Windows Updates as they can cause automatic reboots of the system. Suggest selecting the option \"Download but let me choose when to install\".</li><li>The system should be Activated with a valid windows licence to allow the various software packages to install and update correctly. This should have been done when you installed Windows but if you haven't this is just a reminder...</li><li>As the setup script will cause multiple reboots it is a good idea to setup autologon for the account used to run the setup scripts. From an administrator command prompt type \"control userpasswords2\" select the account and uncheck \"Users must enter name and password\" or use SysInternals' Autologon.exe.</li><li>Run powershell as an Administrator and enter the command \"Set-ExecutionPolicy Unrestricted\"</li><li>Check the UAC is turned off</li><li>If you wish mkbuildmachine.ps1 to handle reboots then Check that no login screen shows after reboot</li></ul><p><strong>VM</strong></p><ul><li>If a build machine is being installed on a OpenXT VM, it is recommended that you install the OpenXT tools. It will make the VM faster.</li></ul><p><strong>Ready To Start</strong></p><p>The script <a href=\"https://github.com/OpenXT/openxt/tree/master/windows/mkbuildmachine.ps1\">https://github.com/OpenXT/openxt/tree/master/windows/mkbuildmachine.ps1</a> installs all necessary software, including the .Net framework, cygwin, Visual Studio 2012 premium (unactivated and usable for 30 days) and the WDK. This uses some powershell modules in the same directory, so the easiest approach is to clone the whole repository.</p><p>mkbuildmachine.ps1 should work well on a cleanly installed Windows machine. It has checks to avoid reinstalling software. Also in the same directory is inspectbuildmachine.ps1, which will simply run the tests and you can use to verify that the build machine is in the state that mkbuildmachine.ps1 tries to get it to. If you find the XT Windows drivers won't build on a machine which these scripts thing is ready then we should work to enhance the tests.</p><p>Install <a href=\"http://msysgit.github.io/\">http://msysgit.github.io/</a>. Then use the git bash shell to git clone openxt:</p><pre><code>git clone https://github.com/OpenXT/openxt.git \n</code></pre><p>Now, use a administrator cmd window and from the directory you cloned openxt run:</p><pre><code>cd openxt\\windows\npowershell .\\mkbuildmachine.ps1\n</code></pre><p>This will download a bunch of files and create logs in your system temp directory. Or specify the -workdir option to specifiy an alternative work directory. You'll find a log in %TEMP%\\mkbuildmachine.log. It doesn't render well in Notepad (since powershell doesn't put carriage returns everywhere it might) but should be fine in most other editors.</p><p>If there are errors, deal with them (e.g. reboot) and try again.</p><p><strong>NOTE:</strong> The script can be somewhat unstable, since it relies on URLs that may not exist anymore. If a step fails, look up, download and install the right version of the program that failed (or the latest stable if unspecified) and restart the script.</p><p><strong>F</strong><strong>urther Setup</strong></p><p>Now all the software required by the build system is installed, there is however still yet more to do. For example:</p><ul><li>Windows update should be run to pick up all the security updates for the newly installed build tools and Windows itself. Either do this manually or set updates to self-install again.</li><li>Consider disabling the auto-logon.</li></ul><p><strong>Certificates</strong></p><p>To run windows builds requires the signing of drivers and executables in several places, as such you need a signing certificate. Depending what you'll be using your new build machine for, use one of the two following guides.</p><p><strong>Development</strong></p><p>Being a developer, you should not have access to machines with official signing certificates installed on them - if you do you better have good reasons for why. Regardless, you still need to be able to actually create test builds for your new shiny code, meaning you first need to create a test certificate for your machine. This whole process has been scripted for you in the script <a href=\"https://github.com/OpenXT/openxt/blob/master/windows/mkbuildmachine/makecert.bat\">makecert.bat</a>. So, if you cloned openxt.git earlier, run \"makecert.bat \" at an Administrator command prompt, e.g. from an administrator cmd window:</p><pre><code>cd openxt\\windows\\mkbuildmachine\nmakecert developer\n</code></pre><p>You will be prompted for a certificate protection password several times; do not supply a password. Select yes when asked to create private key without password protection. You will also be prompted to install the certificate and should answer yes. Note that there seems to be a problem importing the certificate if you do supply a password.</p><p>What this script actually does is simple. First it creates the bits needed to sign code, wraps them into a pfx file and then adds this file to the User's personal certificate store. To test that everything went okay either run certmgr.msc or add the certificates snap in to mmc.exe. Either example should show the newly created signing key under \"Certificates (Current User) -&gt; Personal -&gt; Certificates\".</p><p><strong>NOTE:</strong> The makecert batch file also creates the certificate and key files in the current directory. The certificate file will be needed in the Windows Build Process step below. In this example, that would be the file \"developer.cer\".</p><p><strong>Official Builds</strong></p><p>An official signing certificate and key will need to be installed on the new build machine for release signed builds. This key should be installed on production build machines only by authorised Administrators.</p><p><strong>NOTE:</strong> The signing step in the build uses the Issuer Id of the certificate to locate the cert/key in the store. This name is sometimes the same for older and newer certificates - e.g. \"John Doe, Inc\". This can lead to a name collision if older expired certificates have the same Issuer Id and cause signing to fail. It is recommended that you remove expired certificates first before installing a new one.</p><h2>Windows build process</h2><p>This section describes how the Windows build process operates and to run a build you must do so on a Windows Build machine. If you have not yet set one of these up, follow the Setup Build Environment instructions, otherwise you can skip to Getting Started.</p><p>This page describes how the Windows build process operates and to run a build you must do so on a Windows Build machine. If you have not yet set one of these up, follow the Setup Build Environment instructions, otherwise you can skip to Getting Started.</p><h3>Setup Build Environment</h3><p>Install Windows on whatever machine / VM you plan to work in. I think that most people end up using Window 7 32bit. Once you have Windows installed, make sure that everything is up-to-date (control panel-&gt;system and security-&gt;check for updates).</p><p>You should now have a barebones, Windows environment. You will need to install the following to get things up and running:</p><ul><li>Git</li><li>DbgView (optional)</li></ul><p>Note that once you have this installed, you will run a set of scripts that will download and install a whole bunch of software for you automatically, so the above is all you need to do manually. Also note that this setup script takes a while, so make sure you give yourself enough time.</p><p><strong>Git</strong></p><p><a href=\"http://git-scm.com/download/win\">http://git-scm.com/download/win</a></p><p>Once you have downloaded the latest version of Git for Windows, start the install process. Use all of the defaults except the following:</p><ul><li>\"Adjusting your PATH environment\" == \"Use Git and optional Unix tools from the Windows Command Prompt\".</li><li>\"Configuring the line ending conversions\" == \"Checkout Windows-style, commit Unix-style line endings\"</li></ul><p><strong>DbgView</strong></p><p><a href=\"https://technet.microsoft.com/en-us/library/bb896647.aspx\">https://technet.microsoft.com/en-us/library/bb896647.aspx</a></p><p>Download and unzip onto your desktop. Once on your desktop, right click the icon, and select \"properties\". Then select the \"compatibility\" tab, and then check \"run this program as an administrator\" and select \"ok\". Admin rights are needed to see debug statements from the kernel.</p><p>Next, open DbgView. From the \"capture\" menu, check the following:</p><ul><li>Capture Global Win32</li><li>Capture Kernel</li><li>Enable Verbose Kernel Output (should be optional)</li></ul><p>Now if you close DbgView and then re-open it, these settings should still be there, ready and waiting.</p><p><span class=\"octicon octicon-link\"> </span><strong>mkbuildmachine</strong></p><p>The rest of the build machine can be installed using a power shell script that is located in the OpenXT git repo.</p><pre><code>git clone https://github.com/OpenXT/openxt.git\n</code></pre><p>Use the <a href=\"https://github.com/OpenXT/openxt/wiki/Windows%20Build%20Machine\">following page</a> for instructions for how to setup Windows, and eventually run this script to get everything else up and running.</p><p><strong>Getting Started</strong></p><p>Note that everything is done using Windows Power Shell (using admin rights). It can be found here: Start Menu-&gt;All Programs-&gt;Accessories-&gt;Windows Power Shell-&gt;Windows Power Shell</p><p>Having set up a build machine, everything is ready for you to perform a build. Within the git repository \"openxt.git\" is everything you need to compile all of the Windows components and package them. To get this process started check out openxt.git to any location on the build machine and navigate into the \"windows\" folder:</p><pre><code>mkdir C:\\Somewhere\nc:\ncd \\Somewhere\ngit clone https://github.com/OpenXT/openxt.git\n</code></pre><p><strong>NOTE:</strong> DO NOT CLONE INTO A PATH CONTAINING SPACES BECAUSE THE BUILD WILL FAIL DUE TO XC-WINDOWS' RELIANCE ON THE WINDDK.</p><p><strong>Contents of openxt/windows</strong></p><p>Within this directory is everything that is required to drive the windows build:</p><ul><li>winbuild-all.ps1 - Actually does and manages the build</li><li>winbuild-prepare.ps1 - prepares the system for a build</li><li>configs directory - stores config files to dictate how the build operates</li><li>BuildSupport directory - Additional scripts to be used as sub-steps of/support for the build And additional bits:</li><li>mkbuildmachine directory - The scripts you used to <a href=\"https://github.com/OpenXT/openxt/wiki/Windows%20Build%20Machine\">create your build machine</a></li></ul><h3>Running a build</h3><p>To run a complete build, the script winbuild-prepare.ps1 must be used first to generate the config.xml file, followed by the winbuild-all.ps1 script. For example:</p><pre><code>c:\ncd \\Somewhere\\openxt\\windows\npowershell .\\winbuild-prepare.ps1 config=sample-config.xml build=123456 branch=master certname=developer developer=true\npowershell .\\winbuild-all.ps1\n</code></pre><p>Where developer is the name of the signing certificate.</p><p><strong>Note:</strong> The build runs fine on Windows 10 32 bits but only as administrator. As as user, it blows up because of this: <a href=\"https://github.com/OpenXT/win-tools/blob/master/XenGuestAgent/XenGuestAgent.vcxproj#L96\">https://github.com/OpenXT/win-tools/blob/master/XenGuestAgent/XenGuestAgent.vcxproj#L96</a></p><p><strong>Verification of your build</strong></p><p>In Windows Explorer right click and select properties on C:\\Somewhere\\openxt\\windows\\msi-installer\\iso\\windows\\setup.exe. There should be a tab called Digital Signatures and you should see the name of your certificate (\"developer\" in our example).</p><h3>Manually installing your tools on an OpenXT VM</h3><p>The output from the build should end up in a file like this:</p><pre><code>C:\\Somewhere\\openxt\\windows\\output\\xctools-iso.zip\n</code></pre><p>The easiest way to test your Windows build is to copy the zip file on to an OpenXT Windows VM, expand it and run the windows\\setup.exe file which should install files.</p><p><strong>NOTE:</strong> that <code>unattendedInstall.bat</code> has references to certificates in <code>openxt\\windows\\SupportFiles</code> which would need to be updated to install the certificate you used to build.</p><p><strong>Windows ISO</strong></p><p>An enhancement to the Windows build is being added to cause the Windows build scripts to also generate an ISO. The ISO file ends up in <code>openxt\\windows\\output\\xc-wintools.iso</code> with the rest of the Windows build output. It of course only contains the Windows specific guest tools.</p><p>The change requires the <code>mkisofs</code> Cygwin package to be installed. If you use the scripts to setup a build machine after the feature is in, you will get this automatically. On older build machines the ISO step will be skipped so as not to break existing kit.</p><p>If you want to manually add <code>mkisofs</code> to your existing build machine, you need to rerun the Cygwin installer which you can find here:</p><p><a href=\"https://www.cygwin.com/setup-x86.exe\">https://www.cygwin.com/setup-x86.exe</a></p><p>Run it, take the default options until you get to the package selector. The installer will detect what you already have so you can just check new packages and install them. The <code>mkisofs</code> is found in several places including under the \"Utils\" list.</p><h3>Incorporating your tools in the OpenXT main ISO</h3><p>Circling back to the location where <a href=\"https://openxt.atlassian.net/wiki/display/OD/How+to+build+OpenXT#HowtobuildOpenXT-SetupOpenXTworkspace\">Setup OpenXT workspace</a> was done, the <code>.config</code> file needs to be edited. The following setting needs to point to a location to copy the Windows build output files for incorporation into the main ISO:</p><p><code>WIN_BUILD_OUTPUT=\"/my/windows/build/output\"</code></p><p>The following files need to be copied to this location:</p><pre>openxt\\windows\\output\\sdk.zip<br/>openxt\\windows\\output\\win-tools.zip<br/>openxt\\windows\\output\\ctools-iso.zip<br/>openxt\\windows\\output\\xc-windows.zip</pre><p>Now the tools need to be built and then the <code>ship</code> step needs to be rerun to regenerate the <code>installer.iso</code>:</p><pre><code>./do_build.sh -s xctools, ship</code></pre>",
    "date": "2024-11-15",
    "disclaimer": "Users of this benchmark dataset are advised to check Atlassian’s official documentation for the most current information.",
    "space": "OD"
}